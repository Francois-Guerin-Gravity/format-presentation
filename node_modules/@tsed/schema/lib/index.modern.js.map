{"version":3,"file":"index.modern.js","sources":["../src/constants/httpStatusMessages.ts","../src/registries/JsonSchemaMapperContainer.ts","../src/registries/JsonEntitiesContainer.ts","../src/utils/getJsonEntityStore.ts","../src/domain/JsonLazyRef.ts","../src/utils/generics.ts","../src/domain/SpecTypes.ts","../src/utils/ref.ts","../src/components/anyMapper.ts","../src/utils/isSuccessStatus.ts","../src/domain/JsonMap.ts","../src/domain/JsonParameterTypes.ts","../src/utils/toJsonMapCollection.ts","../src/domain/JsonRequestBody.ts","../src/utils/mapHeaders.ts","../src/domain/JsonResponse.ts","../src/utils/getComputedType.ts","../src/utils/getJsonType.ts","../src/utils/toJsonRegex.ts","../src/domain/JsonSchema.ts","../src/domain/JsonOperation.ts","../src/domain/JsonParameter.ts","../src/domain/JsonEntityStore.ts","../src/components/classMapper.ts","../src/components/genericsMapper.ts","../src/utils/getInheritedStores.ts","../src/components/inheritedClassMapper.ts","../src/components/itemMapper.ts","../src/components/lazyRefMapper.ts","../src/components/mapMapper.ts","../src/hooks/alterIgnore.ts","../src/components/objectMapper.ts","../src/domain/JsonAliasMap.ts","../src/hooks/alterRequiredGroups.ts","../src/utils/getRequiredProperties.ts","../src/utils/mapNullableType.ts","../src/components/schemaMapper.ts","../src/utils/getJsonSchema.ts","../src/utils/getPropertiesStores.ts","../src/utils/getOperationsStores.ts","../src/utils/buildPath.ts","../src/utils/concatParameters.ts","../src/utils/getJsonPathParameters.ts","../src/utils/mergeOperation.ts","../src/utils/operationIdFormatter.ts","../src/utils/getSpec.ts","../src/utils/mergeSpec.ts","../src/domain/JsonFormatTypes.ts","../src/utils/from.ts","../src/utils/defineStatusModel.ts","../src/decorators/collections/collectionOf.ts","../src/decorators/collections/collectionContains.ts","../src/decorators/common/jsonEntityFn.ts","../src/decorators/collections/maxItems.ts","../src/decorators/collections/minItems.ts","../src/decorators/collections/uniqueItems.ts","../src/decorators/collections/maxProperties.ts","../src/decorators/collections/minProperties.ts","../src/decorators/generics/generics.ts","../src/decorators/generics/genericOf.ts","../src/decorators/operations/deprecated.ts","../src/decorators/operations/consumes.ts","../src/domain/DecoratorContext.ts","../src/decorators/operations/returns.ts","../src/decorators/operations/contentType.ts","../src/decorators/operations/in.ts","../src/decorators/operations/operationId.ts","../src/decorators/operations/operationPath.ts","../src/decorators/operations/path.ts","../src/decorators/operations/produces.ts","../src/decorators/operations/status.ts","../src/decorators/operations/header.ts","../src/decorators/operations/security.ts","../src/decorators/operations/tags.ts","../src/decorators/operations/summary.ts","../src/utils/matchGroups.ts","../src/decorators/common/groups.ts","../src/decorators/operations/partial.ts","../src/decorators/operations/redirect.ts","../src/decorators/operations/location.ts","../src/decorators/common/additionalProperties.ts","../src/decorators/common/property.ts","../src/decorators/common/allow.ts","../src/decorators/common/any.ts","../src/decorators/common/integer.ts","../src/decorators/common/const.ts","../src/decorators/common/default.ts","../src/decorators/common/description.ts","../src/decorators/common/example.ts","../src/decorators/common/enum.ts","../src/decorators/common/maximum.ts","../src/decorators/common/exclusiveMaximum.ts","../src/decorators/common/minimum.ts","../src/decorators/common/exclusiveMinimum.ts","../src/decorators/common/format.ts","../src/decorators/common/forwardGroups.ts","../src/decorators/common/pattern.ts","../src/decorators/common/ignore.ts","../src/decorators/common/maxLength.ts","../src/decorators/common/minLength.ts","../src/decorators/common/multipleOf.ts","../src/decorators/common/name.ts","../src/decorators/common/optional.ts","../src/decorators/common/required.ts","../src/decorators/common/requiredGroups.ts","../src/decorators/common/hidden.ts","../src/decorators/common/title.ts","../src/decorators/common/schema.ts","../src/decorators/common/oneOf.ts","../src/decorators/common/allOf.ts","../src/decorators/common/anyOf.ts","../src/decorators/common/writeOnly.ts","../src/decorators/common/readOnly.ts","../src/decorators/common/customKey.ts","../src/decorators/common/nullable.ts","../src/decorators/config/jsonEntityComponent.ts"],"sourcesContent":["import {constantCase} from \"change-case\";\n\nexport const HTTP_STATUS_MESSAGES: {[key: string]: string} = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"103\": \"Early Hints\",\n  \"200\": \"Success\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"306\": \"(Unused)\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"310\": \"Too Many Redirects\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Request Entity Too Large\",\n  \"414\": \"Request URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Request Range Unsatisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a Teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Too Early\",\n  \"426\": \"Upgrade Required\",\n  \"427\": \"Unassigned\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"430\": \"Unassigned\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n};\n\nexport function getStatusConstant(status: number) {\n  return constantCase(HTTP_STATUS_MESSAGES[status]);\n}\n\nexport function getStatusMessage(status: number) {\n  return HTTP_STATUS_MESSAGES[status];\n}\n","/**\n * @ignore\n */\nexport interface JsonSchemaMapper {\n  (schema: any, options: any): any;\n}\n/**\n * @ignore\n */\nconst JsonSchemaMappersContainer: Map<string, JsonSchemaMapper> = new Map();\n/**\n * @ignore\n */\nexport function registerJsonSchemaMapper(type: string, mapper: JsonSchemaMapper) {\n  return JsonSchemaMappersContainer.set(type, mapper);\n}\n/**\n * @ignore\n */\nexport function getJsonSchemaMapper(type: string): JsonSchemaMapper {\n  // istanbul ignore next\n  if (!JsonSchemaMappersContainer.has(type)) {\n    throw new Error(`JsonSchema ${type} mapper doesn't exists`);\n  }\n  return JsonSchemaMappersContainer.get(type)!;\n}\n/**\n * @ignore\n */\nexport function execMapper(type: string, schema: any, options: any): any {\n  return getJsonSchemaMapper(type)(schema, options);\n}\n","import {DecoratorTypes, Type} from \"@tsed/core\";\nimport type {JsonEntityStore} from \"../domain/JsonEntityStore\";\n\n/**\n * @ignore\n */\nexport const JsonEntitiesContainer = new Map<DecoratorTypes | \"default\", Type<JsonEntityStore>>();\n","import {decoratorTypeOf, Store} from \"@tsed/core\";\nimport type {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {JsonEntitiesContainer} from \"../registries/JsonEntitiesContainer\";\n\n/**\n * @ignore\n */\nexport function getJsonEntityStore<T extends JsonEntityStore = JsonEntityStore>(...args: any[]) {\n  const store = Store.from(...args);\n\n  if (!store.has(\"JsonEntityStore\")) {\n    const entityStore = JsonEntitiesContainer.get(decoratorTypeOf(args)) || JsonEntitiesContainer.get(\"default\");\n\n    const jsonSchemaStore = new (entityStore as any)({\n      store,\n      target: args[0],\n      propertyKey: args[1],\n      index: typeof args[2] === \"number\" ? args[2] : undefined,\n      descriptor: typeof args[2] === \"object\" ? args[2] : undefined\n    });\n\n    store.set(\"JsonEntityStore\", jsonSchemaStore);\n  }\n\n  return store.get<T>(\"JsonEntityStore\")!;\n}\n\nexport function isJsonEntityStore(model: any): model is JsonEntityStore {\n  return model.isStore;\n}\n","import {nameOf, Type} from \"@tsed/core\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {getJsonEntityStore} from \"../utils/getJsonEntityStore\";\n\nexport class JsonLazyRef {\n  readonly isLazyRef = true;\n\n  constructor(readonly getType: () => Type<any>) {}\n\n  get target() {\n    return this.getType();\n  }\n\n  get schema() {\n    return getJsonEntityStore(this.getType()).schema;\n  }\n\n  get name() {\n    return nameOf(this.getType());\n  }\n\n  toJSON(options?: JsonSchemaOptions) {\n    return this.getType() && execMapper(\"schema\", this.schema, options);\n  }\n}\n","import {Type} from \"@tsed/core\";\nimport {JsonSchema} from \"../domain\";\n\nexport type GenericValue = Type<any> | JsonSchema | any;\n\n/**\n * @ignore\n */\nexport type GenericsMap = Map<string, GenericValue>;\n\n/**\n * @ignore\n */\nexport interface GenericTypes {\n  genericTypes: Type<any>[];\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nexport interface GenericLabels {\n  genericLabels: string[];\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nexport interface NestedGenerics {\n  nestedGenerics: GenericValue[][];\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nexport interface GenericsContext extends GenericTypes, GenericLabels, NestedGenerics {\n  generics: GenericsMap;\n}\n\n/**\n * @ignore\n * @param genericLabels\n * @param genericTypes\n */\nexport function getGenericsMap(genericLabels: string[], genericTypes: GenericValue[]): GenericsMap {\n  return genericLabels.reduce((map: Map<string, any>, item: string, index: number) => map.set(item, genericTypes[index]), new Map());\n}\n\n/**\n * @ignore\n * @param options\n */\nexport function mapGenericsOptions(options: Partial<GenericTypes & GenericLabels>) {\n  if (options.genericLabels && options.genericTypes) {\n    const {genericLabels, genericTypes, ...ops} = options;\n\n    return {\n      ...ops,\n      generics: getGenericsMap(genericLabels, genericTypes)\n    };\n  }\n\n  return options;\n}\n\n/**\n * @ignore\n * @param value\n */\nexport function popGenerics(value: NestedGenerics): NestedGenerics & GenericTypes {\n  const [genericTypes, ...out] = value.nestedGenerics;\n\n  return {\n    genericTypes,\n    nestedGenerics: out\n  };\n}\n","export enum SpecTypes {\n  JSON = \"jsonschema\",\n  SWAGGER = \"swagger2\",\n  OPENAPI = \"openapi3\"\n}\n","import {pascalCase} from \"change-case\";\nimport type {JsonSchema} from \"../domain/JsonSchema\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\n\n/**\n * ignore\n * @param options\n */\nfunction getHost(options: JsonSchemaOptions) {\n  const {host = `#/${options.specType === \"openapi3\" ? \"components/schemas\" : \"definitions\"}`} = options;\n\n  return host;\n}\n\n/**\n * @ignore\n */\nexport function createRefName(name: string, options: JsonSchemaOptions) {\n  if (options.groups && options.groups.length) {\n    return pascalCase(`${name} ${options.groups.join(\" \")}`);\n  }\n\n  return name;\n}\n\n/**\n * @ignore\n */\nexport function createRef(name: string, schema: JsonSchema, options: JsonSchemaOptions) {\n  const host = getHost(options);\n  const ref = {\n    $ref: `${host}/${name}`\n  };\n\n  if (schema.nullable) {\n    switch (options.specType) {\n      case SpecTypes.OPENAPI:\n        return {\n          nullable: true,\n          allOf: [ref]\n        };\n      case SpecTypes.JSON:\n        return {\n          oneOf: [{type: \"null\"}, ref]\n        };\n      case SpecTypes.SWAGGER: // unsupported\n        break;\n    }\n  }\n\n  return ref;\n}\n\n/**\n * @ignore\n */\nexport function toRef(value: JsonSchema, schema: any, options: JsonSchemaOptions) {\n  const name = createRefName(value.getName(), options);\n\n  options.schemas![value.getName()] = schema;\n\n  return createRef(name, value, options);\n}\n","import {JsonLazyRef} from \"../domain/JsonLazyRef\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {mapGenericsOptions} from \"../utils/generics\";\nimport {toRef} from \"../utils/ref\";\n\nexport function anyMapper(input: any, options: JsonSchemaOptions = {}): any {\n  options.schemas = options.schemas || {};\n\n  if (typeof input !== \"object\" || input === null) {\n    return input;\n  }\n\n  if (input instanceof JsonLazyRef) {\n    return execMapper(\"lazyRef\", input, options);\n  }\n\n  if (\"toJSON\" in input) {\n    const schema = input.toJSON(mapGenericsOptions(options));\n\n    return input.canRef ? toRef(input, schema, options) : schema;\n  }\n\n  return execMapper(\"object\", input, options);\n}\n\nregisterJsonSchemaMapper(\"any\", anyMapper);\n","export const isSuccessStatus = (code: string | number | undefined) => Number(code) && 200 <= Number(code) && Number(code) < 300;\nexport const isRedirectionStatus = (code: string | number | undefined) => Number(code) && 300 <= Number(code) && Number(code) < 400;\n","import {isFunction} from \"@tsed/core\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {execMapper} from \"../registries/JsonSchemaMapperContainer\";\n\nexport class JsonMap<T> extends Map<string, any> {\n  [key: string]: any;\n\n  constructor(obj: Partial<T> = {}) {\n    super();\n\n    this.assign(obj);\n  }\n\n  assign(obj: Partial<T> & any = {}) {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (isFunction(this[key])) {\n        this[key](value);\n      } else {\n        this.set(key, value);\n      }\n    });\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}) {\n    return execMapper(\"map\", this, options);\n  }\n}\n","export enum JsonParameterTypes {\n  BODY = \"body\",\n  PATH = \"path\",\n  QUERY = \"query\",\n  HEADER = \"header\",\n  COOKIES = \"cookie\",\n  FILES = \"files\"\n}\n/**\n * @ignore\n */\nexport function formatParameterType(type: any): any {\n  return String(type).toLowerCase().replace(\"raw_\", \"\").replace(\"cookies\", \"cookie\");\n}\n/**\n * @ignore\n */\nexport function isParameterType(type: string) {\n  return Object.values(JsonParameterTypes).includes(formatParameterType(type) as any);\n}\n","import {JsonMap} from \"../domain/JsonMap\";\n\n/**\n * @ignore\n */\nexport function toJsonMapCollection(content: {[key: string]: any}, klass = JsonMap) {\n  return Object.entries(content).reduce((content, [key, value]) => {\n    content.set(key, new klass(value));\n\n    return content;\n  }, new JsonMap<any>());\n}\n","import {OpenSpecHash, OS3MediaType, OS3RequestBody} from \"@tsed/openspec\";\nimport {toJsonMapCollection} from \"../utils/toJsonMapCollection\";\nimport {JsonMap} from \"./JsonMap\";\nimport {JsonSchema} from \"./JsonSchema\";\n\nexport type JsonRequestBodyOptions = OS3RequestBody<JsonSchema>;\n\nexport class JsonRequestBody extends JsonMap<JsonRequestBodyOptions> {\n  constructor(obj: Partial<JsonRequestBodyOptions> = {}) {\n    super(obj);\n\n    this.content(obj.content || ({} as any));\n  }\n\n  description(description: string): this {\n    this.set(\"description\", description);\n\n    return this;\n  }\n\n  content(content: OpenSpecHash<OS3MediaType<JsonSchema>>) {\n    this.set(\"content\", toJsonMapCollection(content));\n\n    return this;\n  }\n\n  addContent(mediaType: string, schema: JsonSchema) {\n    const content = this.get(\"content\");\n    const mediaContent = new JsonMap();\n\n    mediaContent.set(\"schema\", schema);\n\n    content.set(mediaType, mediaContent);\n\n    return this;\n  }\n\n  required(required: boolean): this {\n    this.set(\"required\", required);\n\n    return this;\n  }\n}\n","import {cleanObject} from \"@tsed/core\";\nimport {JsonHeader, JsonHeaders} from \"../interfaces/JsonOpenSpec\";\n\n/**\n * Map input header to a standard open spec header\n * @param headers\n * @ignore\n */\nexport function mapHeaders(headers: JsonHeaders): {[key: string]: JsonHeader} {\n  return Object.keys(headers).reduce((newHeaders: {[key: string]: JsonHeader}, key: string) => {\n    const value: any = headers[key];\n\n    let type = typeof value;\n\n    let options: any = {\n      example: value\n    };\n\n    if (type === \"object\") {\n      options = value;\n      options.example = options.value === undefined ? options.example : options.value;\n      delete options.value;\n      type = typeof options.example;\n    }\n\n    options.type = options.type || type;\n\n    newHeaders[key] = cleanObject(options);\n\n    return newHeaders;\n  }, {});\n}\n","import {cleanObject} from \"@tsed/core\";\nimport {OS3MediaType, OS3Response} from \"@tsed/openspec\";\nimport {JsonHeader, JsonSchemaOptions} from \"../interfaces\";\nimport {mapHeaders} from \"../utils/mapHeaders\";\nimport {toJsonMapCollection} from \"../utils/toJsonMapCollection\";\nimport {JsonMap} from \"./JsonMap\";\nimport {JsonSchema} from \"./JsonSchema\";\nimport {SpecTypes} from \"./SpecTypes\";\n\nexport type JsonResponseOptions = OS3Response<JsonSchema, string | JsonHeader>;\n\nexport class JsonMedia extends JsonMap<OS3MediaType<JsonSchema>> {\n  groups: string[] = [];\n\n  schema(schema: JsonSchema) {\n    this.set(\"schema\", schema);\n\n    return this;\n  }\n\n  examples(examples: any) {\n    this.set(\"examples\", examples);\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}): any {\n    return super.toJSON({...options, groups: this.groups});\n  }\n}\n\nexport class JsonResponse extends JsonMap<JsonResponseOptions> {\n  status: number;\n\n  constructor(obj: Partial<JsonResponseOptions> = {}) {\n    super(obj);\n\n    this.content(obj.content || ({} as any));\n  }\n\n  description(description: string): this {\n    this.set(\"description\", description);\n\n    return this;\n  }\n\n  headers(headers: Record<string, string | JsonHeader>): this {\n    this.set(\"headers\", mapHeaders(headers));\n\n    return this;\n  }\n\n  content(content: Record<string, OS3MediaType<JsonSchema>>) {\n    this.set(\"content\", toJsonMapCollection(content, JsonMedia));\n\n    return this;\n  }\n\n  getContent(): JsonMap<JsonMedia> {\n    return this.get(\"content\")!;\n  }\n\n  getMedia(mediaType: string, create = true): JsonMedia {\n    create && this.addMedia(mediaType);\n\n    return this.getContent()?.get(mediaType) as any;\n  }\n\n  addMedia(mediaType: string) {\n    const content = this.get(\"content\");\n\n    if (!content.has(mediaType)) {\n      content.set(mediaType, new JsonMedia());\n    }\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}): any {\n    const response = super.toJSON(options);\n\n    if (this.status === 204) {\n      delete response.content;\n    }\n\n    if (options.specType === SpecTypes.OPENAPI && response.headers) {\n      Object.entries(response.headers).forEach(([key, {type, ...props}]: [string, any]) => {\n        response.headers[key] = {\n          ...props,\n          schema: {\n            type\n          }\n        };\n      });\n    }\n\n    if (options.specType !== SpecTypes.OPENAPI && response.content) {\n      const key = Object.keys(response.content)[0];\n\n      return cleanObject({\n        ...response,\n        ...response.content[key],\n        content: undefined\n      });\n    }\n\n    return response;\n  }\n}\n","import {\n  classOf,\n  isArrowFn,\n  isClass,\n  isClassObject,\n  isCollection,\n  isDate,\n  isPrimitiveOrPrimitiveClass,\n  isPromise,\n  isSymbol,\n  Type\n} from \"@tsed/core\";\n\n/**\n * @ignore\n */\nexport function getComputedType(target: any): Type<any> {\n  if (isPromise(target)) {\n    return Object;\n  }\n\n  if (\n    isClass(target) ||\n    isSymbol(target) ||\n    isPrimitiveOrPrimitiveClass(target) ||\n    isClassObject(target) ||\n    isDate(target) ||\n    isCollection(target)\n  ) {\n    return classOf(target);\n  }\n\n  if (isArrowFn(target)) {\n    return (target as any)();\n  }\n\n  return target;\n}\n","import {isArray, isDate, isPrimitiveOrPrimitiveClass, primitiveOf} from \"@tsed/core\";\n\n/**\n * @ignore\n */\nexport const JSON_TYPES = [\"string\", \"number\", \"integer\", \"boolean\", \"object\", \"array\", \"null\", \"any\"];\n\nexport function getJsonType(value: any): string {\n  if (value === null) {\n    return \"null\";\n  }\n\n  if (isPrimitiveOrPrimitiveClass(value)) {\n    if (JSON_TYPES.indexOf(value as string) > -1) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      if (value === \"file\") {\n        return \"file\";\n      }\n\n      return \"generic\";\n    }\n\n    return primitiveOf(value);\n  }\n\n  if (value === Array) {\n    return \"array\";\n  }\n\n  if (isArray(value)) {\n    return value.map(getJsonType) as any;\n  }\n\n  if (value === Set) {\n    return \"array\";\n  }\n\n  if (isDate(value)) {\n    return \"string\";\n  }\n\n  return \"object\";\n}\n","/**\n * @ignore\n * @param pattern\n */\nexport function toJsonRegex(pattern: string | RegExp) {\n  return String(pattern).replace(/^(\\/)(.*)(\\/)$/, \"$2\");\n}\n","import {classOf, Hooks, isArray, isClass, isFunction, isObject, nameOf, Type, uniq, ValueOf} from \"@tsed/core\";\nimport {JSONSchema6, JSONSchema6Definition, JSONSchema6Type, JSONSchema6TypeName, JSONSchema6Version} from \"json-schema\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {IgnoreCallback} from \"../interfaces/IgnoreCallback\";\nimport {execMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {NestedGenerics} from \"../utils/generics\";\nimport {getComputedType} from \"../utils/getComputedType\";\nimport {getJsonEntityStore, isJsonEntityStore} from \"../utils/getJsonEntityStore\";\nimport {getJsonType} from \"../utils/getJsonType\";\nimport {toJsonRegex} from \"../utils/toJsonRegex\";\nimport {AliasMap, AliasType} from \"./JsonAliasMap\";\nimport {JsonFormatTypes} from \"./JsonFormatTypes\";\nimport {JsonLazyRef} from \"./JsonLazyRef\";\n\nexport interface JsonSchemaObject extends JSONSchema6, Record<string, any> {\n  type: (any | JSONSchema6TypeName) | (any | JSONSchema6TypeName)[];\n  additionalProperties?: boolean | JSONSchema6 | any;\n  propertyNames?: boolean | JSONSchema6 | any;\n  items?: (any | JSONSchema6Definition) | (any | JSONSchema6Definition)[];\n}\n\nexport type AnyJsonSchema = Partial<JsonSchemaObject> | JsonSchema | JsonLazyRef | any;\n\nfunction mapProperties(properties: Record<string, any>) {\n  // istanbul ignore next\n  if (properties instanceof JsonSchema) {\n    return properties;\n  }\n\n  return Object.entries(properties).reduce<any>((properties, [key, schema]) => {\n    properties[toJsonRegex(key)] = isArray(schema) ? schema.map(mapToJsonSchema) : mapToJsonSchema(schema);\n\n    return properties;\n  }, {});\n}\n\nfunction mapToJsonSchema(item: any): any {\n  if (isArray(item)) {\n    return (item as any[]).map(mapToJsonSchema);\n  }\n\n  if (item.isStore || item.isJsonSchema || item.isLazyRef) {\n    return item;\n  }\n\n  if (classOf(item) !== Object && isClass(item)) {\n    return getJsonEntityStore(item).schema;\n  }\n\n  if (isObject(item)) {\n    return JsonSchema.from(item as any);\n  }\n\n  return item;\n}\n\nexport class JsonSchema extends Map<string, any> implements NestedGenerics {\n  readonly isJsonSchema = true;\n  readonly $hooks = new Hooks();\n  readonly $required: Set<string> = new Set();\n  readonly $allow: any[] = [];\n  public $selfRequired: boolean;\n  public $forwardGroups: boolean = false;\n  protected _nullable: boolean = false;\n  protected _genericLabels: string[];\n  protected _nestedGenerics: Type<any>[][] = [];\n  protected _alias: AliasMap = new Map();\n  protected _itemSchema: JsonSchema;\n  protected _target: Type<any>;\n  protected _isGeneric: boolean = false;\n  protected _isCollection: boolean = false;\n  protected _ref: boolean = false;\n\n  // protected _specs: Map<SpecTypes, any> = new Map();\n\n  constructor(obj: JsonSchema | Partial<JsonSchemaObject> = {}) {\n    super();\n\n    if (obj) {\n      this.assign(obj);\n    }\n  }\n\n  get alias() {\n    return this._alias;\n  }\n\n  get nestedGenerics(): any[] {\n    return this._nestedGenerics;\n  }\n\n  set nestedGenerics(value: any[]) {\n    this._nestedGenerics = value;\n  }\n\n  get genericLabels(): string[] {\n    return this._genericLabels;\n  }\n\n  set genericLabels(value: string[]) {\n    this._genericLabels = value;\n  }\n\n  get nullable(): boolean {\n    return this._nullable || this.$allow.includes(null);\n  }\n\n  set nullable(value: boolean) {\n    this._nullable = value;\n  }\n\n  get isClass() {\n    return isClass(this.class) && ![Map, Array, Set, Object, Date, Boolean, Number, String].includes(this._target as any);\n  }\n\n  /**\n   * Current schema is a collection\n   */\n  get isCollection() {\n    return this._isCollection;\n  }\n\n  /**\n   * Current schema is a generic\n   */\n  get isGeneric() {\n    return this._isGeneric;\n  }\n\n  /**\n   * Current schema has generics items\n   */\n  get hasGenerics(): boolean {\n    return !!(this.nestedGenerics && this.nestedGenerics.length);\n  }\n\n  get genericType(): string {\n    return this.get(\"$ref\");\n  }\n\n  get class() {\n    return this.getComputedType();\n  }\n\n  get canRef(): boolean {\n    return this._ref;\n  }\n\n  static from(obj: Partial<JsonSchemaObject> = {}) {\n    return new JsonSchema(obj);\n  }\n\n  itemSchema(obj: AnyJsonSchema = {}) {\n    this._itemSchema = this._itemSchema || mapToJsonSchema(obj);\n    this._itemSchema.assign(obj);\n\n    return this._itemSchema;\n  }\n\n  getAliasOf(property: AliasType) {\n    return this._alias.get(property as any);\n  }\n\n  addAlias(property: AliasType, alias: AliasType) {\n    this._alias.set(property, alias);\n    this._alias.set(alias, property);\n\n    return this;\n  }\n\n  removeAlias(property: AliasType) {\n    const alias = this._alias.get(property);\n    alias && this._alias.delete(alias);\n    this._alias.delete(property);\n\n    return this;\n  }\n\n  $id($id: string) {\n    super.set(\"$id\", $id);\n\n    return this;\n  }\n\n  $ref($ref: string) {\n    super.set(\"$ref\", $ref);\n\n    return this;\n  }\n\n  $schema($schema: JSONSchema6Version) {\n    super.set(\"$schema\", $schema);\n\n    return this;\n  }\n\n  /**\n   * Create a ref and use name to sharing schema\n   * @param name\n   */\n  label(name: string) {\n    this._ref = true;\n\n    super.set(\"name\", name);\n\n    return this;\n  }\n\n  name(name: string) {\n    super.set(\"name\", name);\n\n    return this;\n  }\n\n  ignore(cb: boolean | IgnoreCallback) {\n    if (typeof cb === \"boolean\") {\n      const bool = cb;\n      cb = () => bool;\n    }\n\n    this.$hooks.on(\"ignore\", cb);\n\n    return this;\n  }\n\n  /**\n   * This keyword can be used to supply a default JSON value associated with a particular schema.\n   * It is RECOMMENDED that a default value be valid against the associated schema.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.3\n   */\n  default(value: JSONSchema6Type) {\n    super.set(\"default\", value);\n\n    return this;\n  }\n\n  /**\n   * More readible form of a one-element \"enum\"\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.24\n   */\n  const(value: JSONSchema6Type) {\n    super.set(\"const\", value);\n\n    return this;\n  }\n\n  /**\n   * This attribute is a string that provides a full description of the of purpose the instance property.\n   *\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2\n   */\n  description(description: string) {\n    super.set(\"description\", description);\n\n    return this;\n  }\n\n  /**\n   * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\n   * If \"items\" is an array of schemas, validation succeeds if every instance element\n   * at a position greater than the size of \"items\" validates against \"additionalItems\".\n   * Otherwise, \"additionalItems\" MUST be ignored, as the \"items\" schema\n   * (possibly the default value of an empty schema) is applied to all elements.\n   * Omitting this keyword has the same behavior as an empty schema.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.10\n   */\n  additionalItems(additionalItems: boolean | AnyJsonSchema) {\n    super.set(\"additionalItems\", mapToJsonSchema(additionalItems));\n\n    return this;\n  }\n\n  /**\n   * An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.14\n   */\n  contains(contains: JSONSchema6Definition) {\n    super.set(\"contains\", mapToJsonSchema(contains));\n\n    return this;\n  }\n\n  /**\n   * Array of examples with no validation effect the value of \"default\" is usable as an example without repeating it under this keyword\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.4\n   */\n  examples(examples: JSONSchema6Type[]) {\n    super.set(\"examples\", examples);\n\n    return this;\n  }\n\n  /**\n   * Array of examples with no validation effect the value of \"default\" is usable as an example without repeating it under this keyword\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.4\n   */\n  example(...examples: JSONSchema6Type[]) {\n    return this.examples(examples);\n  }\n\n  /**\n   * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.\n   * Omitting this keyword has the same behavior as an empty schema.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.9\n   */\n  items(items: AnyJsonSchema | AnyJsonSchema[]) {\n    super.set(\"items\", (this._itemSchema = mapToJsonSchema(items)));\n\n    return this;\n  }\n\n  /**\n   * Must be a non-negative integer.\n   * An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.11\n   */\n  maxItems(maxItems: number) {\n    super.set(\"maxItems\", maxItems);\n\n    return this;\n  }\n\n  /**\n   * Must be a non-negative integer.\n   * An array instance is valid against \"maxItems\" if its size is greater than, or equal to, the value of this keyword.\n   * Omitting this keyword has the same behavior as a value of 0.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.12\n   */\n  minItems(minItems: number) {\n    super.set(\"minItems\", minItems);\n\n    return this;\n  }\n\n  /**\n   * If this keyword has boolean value false, the instance validates successfully.\n   * If it has boolean value true, the instance validates successfully if all of its elements are unique.\n   * Omitting this keyword has the same behavior as a value of false.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.13\n   */\n  uniqueItems(uniqueItems: boolean) {\n    super.set(\"uniqueItems\", uniqueItems);\n\n    return this;\n  }\n\n  /**\n   * Must be a non-negative integer.\n   * An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.15\n   */\n  maxProperties(maxProperties: number) {\n    super.set(\"maxProperties\", maxProperties);\n\n    return this;\n  }\n\n  /**\n   * Must be a non-negative integer.\n   * An object instance is valid against \"maxProperties\" if its number of properties is greater than,\n   * or equal to, the value of this keyword.\n   * Omitting this keyword has the same behavior as a value of 0.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.16\n   */\n  minProperties(minProperties: number) {\n    super.set(\"minProperties\", minProperties);\n\n    return this;\n  }\n\n  allow(...allow: any[]) {\n    this.$allow.push(...allow);\n    return this;\n  }\n\n  /**\n   * Elements of this array must be unique.\n   * An object instance is valid against this keyword if every item in the array is the name of a property in the instance.\n   * Omitting this keyword has the same behavior as an empty array.\n   *\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.17\n   */\n  required(required: boolean | string[] = true) {\n    if (isArray(required)) {\n      this.$required.clear();\n\n      required.forEach((value: any) => this.$required.add(value));\n    } else {\n      const schema = this.clone();\n      schema.$selfRequired = required;\n      return schema;\n    }\n\n    return this;\n  }\n\n  addRequired(property: string) {\n    this.$required.add(property);\n\n    return this;\n  }\n\n  removeRequired(property: string) {\n    this.$required.delete(property);\n\n    return this;\n  }\n\n  isRequired(property: string): boolean {\n    return this.$required.has(property);\n  }\n\n  /**\n   * This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.\n   * Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value,\n   * the child instance for that name successfully validates against the corresponding schema.\n   * Omitting this keyword has the same behavior as an empty object.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.18\n   */\n  properties(properties: AnyJsonSchema | Record<string, AnyJsonSchema>) {\n    super.set(\"properties\", mapProperties(properties));\n\n    return this;\n  }\n\n  addProperty(key: string, schema: AnyJsonSchema) {\n    const properties = this.get(\"properties\") || {};\n\n    properties[key] = schema;\n\n    super.set(\"properties\", mapProperties(properties));\n\n    return this;\n  }\n\n  /**\n   * This attribute is an object that defines the schema for a set of property names of an object instance.\n   * The name of each property of this attribute's object is a regular expression pattern in the ECMA 262, while the value is a schema.\n   * If the pattern matches the name of a property on the instance object, the value of the instance's property\n   * MUST be valid against the pattern name's schema value.\n   * Omitting this keyword has the same behavior as an empty object.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.19\n   */\n  patternProperties(patternProperties: Record<string, AnyJsonSchema>) {\n    super.set(\"patternProperties\", mapProperties(patternProperties));\n\n    return this;\n  }\n\n  /**\n   * This attribute defines a schema for all properties that are not explicitly defined in an object type definition.\n   * If specified, the value MUST be a schema or a boolean.\n   * If false is provided, no additional properties are allowed beyond the properties defined in the schema.\n   * The default value is an empty schema which allows any value for additional properties.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.20\n   */\n  additionalProperties(additionalProperties: boolean | AnyJsonSchema) {\n    super.set(\"additionalProperties\", mapToJsonSchema(additionalProperties));\n\n    return this;\n  }\n\n  /**\n   * This attribute defines a schema for all properties that are not explicitly defined in an object type definition.\n   * If specified, the value MUST be a schema or a boolean.\n   * If false is provided, no additional properties are allowed beyond the properties defined in the schema.\n   * The default value is an empty schema which allows any value for additional properties.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.20\n   * @alias additionalProperties\n   * @param unknown\n   */\n  unknown(unknown: boolean = true) {\n    return this.additionalProperties(unknown);\n  }\n\n  /**\n   * This keyword specifies rules that are evaluated if the instance is an object and contains a certain property.\n   * Each property specifies a dependency.\n   * If the dependency value is an array, each element in the array must be unique.\n   * Omitting this keyword has the same behavior as an empty object.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.21\n   */\n  dependencies(dependencies: {[p: string]: JSONSchema6Definition | JsonSchema | string[]}) {\n    super.set(\"dependencies\", mapProperties(dependencies));\n\n    return this;\n  }\n\n  /**\n   * Takes a schema which validates the names of all properties rather than their values.\n   * Note the property name that the schema is testing will always be a string.\n   * Omitting this keyword has the same behavior as an empty schema.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.22\n   */\n  propertyNames(propertyNames: JSONSchema6Definition | JsonSchema) {\n    super.set(\"propertyNames\", mapToJsonSchema(propertyNames));\n\n    return this;\n  }\n\n  /**\n   * This provides an enumeration of all possible values that are valid\n   * for the instance property. This MUST be an array, and each item in\n   * the array represents a possible value for the instance value. If\n   * this attribute is defined, the instance value MUST be one of the\n   * values in the array in order for the schema to be valid.\n   *\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.23\n   */\n  enum(enumValues: JSONSchema6Type[]): this {\n    super.set(\"enum\", uniq(enumValues));\n\n    return this;\n  }\n\n  /**\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.1\n   */\n  definitions(definitions: Record<string, AnyJsonSchema>) {\n    super.set(\"definitions\", mapProperties(definitions));\n\n    return this;\n  }\n\n  /**\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.26\n   */\n  allOf(allOf: AnyJsonSchema[]) {\n    super.set(\"allOf\", allOf.map(mapToJsonSchema));\n\n    return this;\n  }\n\n  /**\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.27\n   */\n  anyOf(anyOf: AnyJsonSchema[]) {\n    super.set(\"anyOf\", anyOf.map(mapToJsonSchema));\n\n    return this;\n  }\n\n  /**\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.28\n   */\n  oneOf(oneOf: AnyJsonSchema[]) {\n    super.set(\"oneOf\", oneOf.map(mapToJsonSchema));\n\n    return this;\n  }\n\n  /**\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.29\n   */\n  not(not: AnyJsonSchema) {\n    super.set(\"not\", mapToJsonSchema(not));\n\n    return this;\n  }\n\n  /**\n   * Must be strictly greater than 0.\n   * A numeric instance is valid only if division by this keyword's value results in an integer.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.1\n   */\n  multipleOf(multipleOf: number): this {\n    super.set(\"multipleOf\", multipleOf);\n\n    return this;\n  }\n\n  /**\n   * Representing an inclusive upper limit for a numeric instance.\n   * This keyword validates only if the instance is less than or exactly equal to \"maximum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.2\n   */\n  maximum(maximum: number): this {\n    super.set(\"maximum\", maximum);\n\n    return this;\n  }\n\n  /**\n   * Representing an exclusive upper limit for a numeric instance.\n   * This keyword validates only if the instance is strictly less than (not equal to) to \"exclusiveMaximum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.3\n   */\n  exclusiveMaximum(exclusiveMaximum: number): this {\n    super.set(\"exclusiveMaximum\", exclusiveMaximum);\n\n    return this;\n  }\n\n  /**\n   * Representing an inclusive lower limit for a numeric instance.\n   * This keyword validates only if the instance is greater than or exactly equal to \"minimum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.4\n   */\n  minimum(minimum: number): this {\n    super.set(\"minimum\", minimum);\n\n    return this;\n  }\n\n  /**\n   * Representing an exclusive lower limit for a numeric instance.\n   * This keyword validates only if the instance is strictly greater than (not equal to) to \"exclusiveMinimum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.5\n   */\n  exclusiveMinimum(exclusiveMinimum: number): this {\n    super.set(\"exclusiveMinimum\", exclusiveMinimum);\n\n    return this;\n  }\n\n  /**\n   * Must be a non-negative integer.\n   * A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.6\n   */\n  maxLength(maxLength: number): this {\n    super.set(\"maxLength\", maxLength);\n\n    return this;\n  }\n\n  /**\n   * Must be a non-negative integer.\n   * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\n   * Omitting this keyword has the same behavior as a value of 0.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.7\n   */\n  minLength(minLength: number): this {\n    super.set(\"minLength\", minLength);\n\n    return this;\n  }\n\n  /**\n   * Should be a valid regular expression, according to the ECMA 262 regular expression dialect.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.8\n   */\n  pattern(pattern: string | RegExp): this {\n    super.set(\"pattern\", toJsonRegex(pattern));\n\n    return this;\n  }\n\n  /**\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-8\n   */\n  format(format: JsonFormatTypes | ValueOf<JsonFormatTypes>): this {\n    super.set(\"format\", format);\n\n    return this;\n  }\n\n  /**\n   * A single type, or a union of simple types\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.25\n   */\n  type(type: any | JSONSchema6TypeName | JSONSchema6TypeName[]): this {\n    switch (type) {\n      case Map:\n        super.set(\"type\", getJsonType(type));\n        this._target = type;\n        this._isCollection = true;\n        if (!this.has(\"additionalProperties\")) {\n          super.set(\"additionalProperties\", this.itemSchema({}));\n        }\n        break;\n\n      case Array:\n        super.set(\"type\", getJsonType(type));\n        this._target = type;\n        this._isCollection = true;\n\n        if (!this.has(\"items\")) {\n          super.set(\"items\", this.itemSchema({}));\n        }\n        break;\n\n      case Set:\n        super.set(\"type\", getJsonType(type));\n        this._target = type;\n        this._isCollection = true;\n        this.uniqueItems(true);\n\n        if (!this.has(\"items\")) {\n          super.set(\"items\", this.itemSchema({}));\n        }\n        break;\n\n      case \"integer\":\n        super.set(\"type\", getJsonType(type));\n        this.integer();\n        break;\n\n      case Object:\n      case Date:\n      case Boolean:\n      case Number:\n      case String:\n        super.set(\"type\", getJsonType(type));\n        this._target = type;\n        if (!this.has(\"properties\")) {\n          super.set(\"properties\", {});\n        }\n        break;\n\n      default:\n        if (isClass(type) || isFunction(type)) {\n          super.set(\"type\", undefined);\n          this._target = type;\n\n          if (!this.has(\"properties\")) {\n            super.set(\"properties\", {});\n          }\n        } else {\n          const jsonType = getJsonType(type);\n          if (jsonType === \"generic\") {\n            this._isGeneric = true;\n            super.set(\"$ref\", type);\n          } else {\n            super.set(\"type\", jsonType);\n          }\n        }\n    }\n\n    return this;\n  }\n\n  any(...types: any[]) {\n    types = uniq(types.length ? types : [\"integer\", \"number\", \"string\", \"boolean\", \"array\", \"object\", \"null\"]).map(getJsonType);\n\n    if (types.includes(\"null\")) {\n      this.nullable = true;\n    }\n\n    this.type(types.length === 1 ? types[0] : types);\n\n    return this;\n  }\n\n  integer() {\n    super.set(\"type\", \"integer\");\n    super.set(\"multipleOf\", 1.0);\n\n    return this;\n  }\n\n  /**\n   * This attribute is a string that provides a short description of the instance property.\n   *\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2\n   */\n  title(title: string): this {\n    super.set(\"title\", title);\n\n    return this;\n  }\n\n  readOnly(readOnly: boolean): this {\n    super.set(\"readOnly\", readOnly);\n\n    return this;\n  }\n\n  writeOnly(readOnly: boolean): this {\n    super.set(\"writeOnly\", readOnly);\n\n    return this;\n  }\n\n  customKey(key: string, value: any) {\n    super.set(`#${key}`, value);\n\n    return this;\n  }\n\n  toObject(options?: JsonSchemaOptions) {\n    return this.toJSON(options);\n  }\n\n  toJSON(options?: JsonSchemaOptions) {\n    let addDef = false;\n\n    if (!options) {\n      addDef = true;\n      options = {schemas: {}};\n    }\n\n    const schema = execMapper(\"schema\", this, options);\n\n    if (addDef && options.schemas && Object.keys(options.schemas).length) {\n      schema.definitions = options.schemas;\n    }\n\n    return schema;\n  }\n\n  assign(obj: JsonSchema | Partial<JsonSchemaObject> = {}) {\n    const entries = obj instanceof JsonSchema ? [...obj.entries()] : Object.entries(obj);\n\n    entries.forEach(([key, value]) => {\n      this.set(key, value);\n    });\n\n    if (obj instanceof JsonSchema) {\n      this.$selfRequired = obj.$selfRequired;\n\n      obj.$required.forEach((key) => {\n        this.$required.add(key);\n      });\n\n      this._ref = obj._ref;\n      this._alias = new Map(this._alias.entries());\n      obj._genericLabels && (this._genericLabels = [...obj._genericLabels]);\n      this._nestedGenerics = obj._nestedGenerics.map((item) => [...item]);\n      this._target = obj._target;\n      this._isGeneric = obj._isGeneric;\n      this._isCollection = obj._isCollection;\n      this._ref = obj._ref;\n\n      super.set(\"type\", obj.get(\"type\"));\n    }\n\n    return this;\n  }\n\n  set(key: string, value: any): this {\n    if (key in this) {\n      isFunction((this as any)[key]) && (this as any)[key](value);\n    } else {\n      super.set(key, value);\n    }\n\n    return this;\n  }\n\n  /**\n   * Return the itemSchema computed type.\n   * If the type is a function used for recursive model,\n   * the function will be called to get the right type.\n   */\n  getComputedType(): any {\n    return getComputedType(this._target);\n  }\n\n  getComputedItemType(): any {\n    return this._itemSchema ? this._itemSchema.getComputedType() : this.getComputedType();\n  }\n\n  /**\n   * Return the Json type as string\n   */\n  getJsonType(): string | string[] {\n    return this.get(\"type\") || getJsonType(this.getComputedType());\n  }\n\n  getTarget() {\n    return this._target;\n  }\n\n  /**\n   * Get the symbolic name of the entity\n   */\n  getName() {\n    return this.get(\"name\") || (this._target ? nameOf(classOf(this.getComputedType())) : \"\");\n  }\n\n  clone() {\n    return new JsonSchema(this);\n  }\n}\n","import {deepMerge, uniq, uniqBy} from \"@tsed/core\";\nimport {OpenSpecSecurity, OpenSpecTag, OS3Operation} from \"@tsed/openspec\";\nimport {HTTP_STATUS_MESSAGES} from \"../constants/httpStatusMessages\";\nimport {JsonHeader, JsonSchemaOptions} from \"../interfaces\";\nimport {isRedirectionStatus, isSuccessStatus} from \"../utils/isSuccessStatus\";\nimport {JsonMap} from \"./JsonMap\";\nimport {JsonParameter} from \"./JsonParameter\";\nimport {isParameterType, JsonParameterTypes} from \"./JsonParameterTypes\";\nimport {JsonRequestBody} from \"./JsonRequestBody\";\nimport {JsonResponse} from \"./JsonResponse\";\nimport {JsonSchema} from \"./JsonSchema\";\nimport {SpecTypes} from \"./SpecTypes\";\n\nexport interface JsonMethodPath {\n  path: string | RegExp;\n  method: string;\n\n  [key: string]: any;\n}\n\nexport interface JsonOperationOptions extends OS3Operation<JsonSchema, JsonParameter, JsonMap<JsonResponse>> {\n  consumes: string[];\n  produces: string[];\n}\n\nexport class JsonOperation extends JsonMap<JsonOperationOptions> {\n  readonly operationPaths: Map<string, JsonMethodPath> = new Map();\n  #status: number;\n  #redirection: boolean = false;\n\n  constructor(obj: Partial<JsonOperationOptions> = {}) {\n    super({parameters: [], responses: new JsonMap(), ...obj});\n  }\n\n  get response(): JsonResponse | undefined {\n    return this.getResponses().get(this.getStatus().toString());\n  }\n\n  get status() {\n    return this.#status;\n  }\n\n  tags(tags: OpenSpecTag[]): this {\n    super.set(\"tags\", tags);\n\n    return this;\n  }\n\n  addTags(tags: OpenSpecTag[]) {\n    tags = uniqBy([...(this.get(\"tags\") || []), ...tags], \"name\");\n\n    return this.tags(tags);\n  }\n\n  summary(summary: string): this {\n    super.set(\"summary\", summary);\n\n    return this;\n  }\n\n  operationId(operationId: string): this {\n    this.set(\"operationId\", operationId);\n\n    return this;\n  }\n\n  responses(responses: JsonMap<any>): this {\n    this.set(\"responses\", responses);\n\n    return this;\n  }\n\n  defaultStatus(status: number) {\n    this.#status = status;\n\n    return this;\n  }\n\n  getStatus() {\n    return this.#status || 200;\n  }\n\n  setRedirection(status = 302) {\n    this.#redirection = true;\n    this.#status = status;\n    return this;\n  }\n\n  isRedirection(status?: number) {\n    if (this.#redirection) {\n      if (status) {\n        return isRedirectionStatus(status);\n      }\n    }\n\n    return this.#redirection;\n  }\n\n  addResponse(statusCode: string | number, response: JsonResponse) {\n    if ((isSuccessStatus(statusCode) || isRedirectionStatus(statusCode)) && !this.#status) {\n      const res = this.getResponseOf(200);\n\n      this.getResponses().set(statusCode.toString(), res).delete(\"200\");\n\n      this.defaultStatus(Number(statusCode));\n    }\n\n    const currentCode = statusCode === \"default\" ? this.getStatus().toString() : statusCode.toString();\n    const currentResponse = this.getResponses().get(currentCode);\n\n    if (!currentResponse) {\n      response.status = Number(currentCode);\n      this.getResponses().set(currentCode, response);\n    } else {\n      response.forEach((value, key) => {\n        if (![\"content\"].includes(key)) {\n          currentResponse.set(key, deepMerge(currentResponse.get(key), value));\n        }\n      });\n      currentResponse.status = Number(currentCode);\n    }\n\n    return this;\n  }\n\n  getResponses() {\n    return this.get(\"responses\") as JsonMap<JsonResponse>;\n  }\n\n  getResponseOf(status: number | string): JsonResponse {\n    return (status === \"default\" ? this.response : this.getResponses().get(String(status))) || new JsonResponse();\n  }\n\n  ensureResponseOf(status: number | string): JsonResponse {\n    this.addResponse(status, this.getResponseOf(status));\n    return this.getResponseOf(status);\n  }\n\n  getHeadersOf(status: number): Record<string, JsonHeader & {example: string}> {\n    return this.getResponseOf(status).get(\"headers\") || {};\n  }\n\n  getContentTypeOf(status: number): any {\n    return [...this.getResponseOf(status).get(\"content\").keys()].slice(-1)[0];\n  }\n\n  security(security: OpenSpecSecurity): this {\n    this.set(\"security\", security);\n\n    return this;\n  }\n\n  addSecurityScopes(name: string, scopes: string[]) {\n    const security = this.get(\"security\") || {};\n    security[name] = uniq([...(security[name] || []), ...scopes]);\n\n    return this.security(security);\n  }\n\n  description(description: string): this {\n    super.set(\"description\", description);\n\n    return this;\n  }\n\n  deprecated(deprecated: boolean): this {\n    super.set(\"deprecated\", deprecated);\n\n    return this;\n  }\n\n  parameters(parameters: JsonParameter[]): this {\n    super.set(\"parameters\", parameters);\n\n    return this;\n  }\n\n  addParameter(index: number, parameter: JsonParameter) {\n    if (index === -1) {\n      index = this.get(\"parameters\").length;\n    }\n    this.get(\"parameters\")[index] = parameter;\n  }\n\n  consumes(consumes: string[]): this {\n    super.set(\"consumes\", consumes);\n\n    return this;\n  }\n\n  produces(produces: string[]): this {\n    super.set(\"produces\", produces);\n\n    return this;\n  }\n\n  addProduce(produce: string) {\n    const produces = uniq([].concat(this.get(\"produces\"), produce as never)).filter(Boolean);\n\n    this.set(\"produces\", produces);\n  }\n\n  addOperationPath(method: string, path: string | RegExp, options: any = {}) {\n    this.operationPaths.set(String(method) + String(path), {\n      ...options,\n      method,\n      path\n    });\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}): any {\n    const operation = super.toJSON({...options, ignore: [\"parameters\"]});\n    const bodyParameters: JsonParameter[] = [];\n    const parameters: any[] = [];\n\n    if (operation.security) {\n      operation.security = [].concat(operation.security);\n    }\n\n    this.get(\"parameters\").forEach((parameter: JsonParameter) => {\n      if (!isParameterType(this.get(\"in\"))) {\n        if (parameter.get(\"in\")) {\n          if ([JsonParameterTypes.BODY, JsonParameterTypes.FILES].includes(parameter.get(\"in\"))) {\n            bodyParameters.push(parameter);\n          } else {\n            parameters.push(...[].concat(parameter.toJSON(options)));\n          }\n        }\n      }\n    });\n\n    operation.parameters = parameters.filter(Boolean);\n\n    if (this.get(\"responses\").size === 0) {\n      operation.responses = {\n        \"200\": {\n          description: HTTP_STATUS_MESSAGES[200]\n        }\n      };\n    }\n\n    if (bodyParameters.length) {\n      const parameter = buildSchemaFromBodyParameters(bodyParameters, options);\n      if (options.specType === SpecTypes.OPENAPI) {\n        operation.requestBody = toRequestBody(this, parameter).toJSON(options);\n      } else {\n        operation.parameters.push(toJsonParameter(parameter));\n      }\n    }\n\n    if (options.specType === SpecTypes.OPENAPI) {\n      delete operation.consumes;\n      delete operation.produces;\n    }\n\n    return operation;\n  }\n}\n\nfunction toRequestBody(operation: JsonOperation, {schema, in: _, ...props}: any) {\n  const requestBody = new JsonRequestBody(props);\n\n  const consumes = operation.get(\"consumes\")?.length ? operation.get(\"consumes\") : [\"application/json\"];\n\n  consumes.forEach((consume: string) => {\n    requestBody.addContent(consume, schema);\n  });\n\n  return requestBody;\n}\n\nfunction toJsonParameter(parameter: any) {\n  return {\n    in: JsonParameterTypes.BODY,\n    name: JsonParameterTypes.BODY,\n    ...parameter\n  };\n}\n\nfunction buildSchemaFromBodyParameters(parameters: JsonParameter[], options: JsonSchemaOptions) {\n  let schema = new JsonSchema();\n  const props: any = {};\n  const refs: JsonSchema[] = [];\n  let propsLength = 0;\n\n  parameters.forEach((parameter) => {\n    const name = parameter.getName();\n\n    Array.from(parameter.entries())\n      .filter(([key]) => ![\"in\", \"name\"].includes(key))\n      .forEach(([key, value]) => {\n        if (props[key] === undefined) {\n          props[key] = value;\n        }\n      });\n\n    const jsonParameter = parameter.toJSON(options);\n\n    if (name) {\n      schema.addProperty(\n        name,\n        jsonParameter.schema || {\n          type: jsonParameter.type\n        }\n      );\n\n      if (parameter.get(\"required\")) {\n        schema.addRequired(name);\n      }\n\n      propsLength++;\n    } else {\n      refs.push(jsonParameter);\n    }\n  });\n\n  if (propsLength) {\n    schema.type(\"object\");\n    return {schema: schema.toJSON(options), required: false, ...props};\n  }\n\n  if (refs.length === 1) {\n    return refs[0];\n  }\n\n  if (refs.length > 0) {\n    schema.allOf(refs);\n  }\n\n  return {schema: schema.toJSON(options), required: false, ...props};\n}\n","import {cleanObject, toMap, Type} from \"@tsed/core\";\nimport {OS2Schema, OS3Parameter, OS3Schema, OS3StyleParameter} from \"@tsed/openspec\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {execMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {NestedGenerics, popGenerics} from \"../utils/generics\";\nimport {JsonMap} from \"./JsonMap\";\nimport {formatParameterType, isParameterType, JsonParameterTypes} from \"./JsonParameterTypes\";\nimport {JsonSchema} from \"./JsonSchema\";\nimport {SpecTypes} from \"./SpecTypes\";\n\nconst IGNORE_OS2_PROPS = [\"example\", \"examples\", \"title\"];\n\nexport class JsonParameter extends JsonMap<OS3Parameter<JsonSchema>> implements NestedGenerics {\n  nestedGenerics: Type<any>[][] = [];\n  groups: string[];\n  $schema: JsonSchema;\n\n  getName() {\n    const name = this.get(\"name\");\n\n    if (this.get(\"in\") === \"files\") {\n      return name.split(\".\")[0];\n    }\n\n    return name;\n  }\n\n  name(name: string): this {\n    this.set(\"name\", name);\n\n    return this;\n  }\n\n  description(description: string): this {\n    this.set(\"description\", description);\n\n    return this;\n  }\n\n  in(inType: string, expression: string | any = \"\"): this {\n    this.set(\"in\", formatParameterType(inType));\n    this.expression = expression;\n\n    return this;\n  }\n\n  required(required: boolean): this {\n    this.set(\"required\", required);\n\n    return this;\n  }\n\n  schema(schema: JsonSchema): this {\n    this.$schema = schema;\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}) {\n    if (!isParameterType(this.get(\"in\"))) {\n      return null;\n    }\n\n    const schemasContainer = toMap<string, OS2Schema | OS3Schema>(options.schemas || {});\n\n    return this.build({...options, groups: this.groups}, schemasContainer);\n  }\n\n  private build(options: JsonSchemaOptions, schemasContainer: Map<string, OS3Schema | OS2Schema>) {\n    const {type, schema, ...parameter} = super.toJSON(options);\n\n    const jsonSchema = execMapper(\"item\", this.$schema, {\n      ...options,\n      ...popGenerics(this)\n    });\n\n    parameter.required = parameter.required || this.get(\"in\") === JsonParameterTypes.PATH;\n\n    if (this.get(\"in\") === JsonParameterTypes.FILES) {\n      const isOpenApi = options.specType === SpecTypes.OPENAPI;\n\n      const schema = {\n        type: isOpenApi ? \"string\" : \"file\",\n        format: isOpenApi ? \"binary\" : undefined,\n        oneOf: undefined\n      };\n\n      if (jsonSchema.type === \"array\") {\n        jsonSchema.items = cleanObject({\n          ...jsonSchema.items,\n          ...schema\n        });\n\n        parameter.schema = jsonSchema;\n      } else {\n        parameter.schema = cleanObject({\n          ...jsonSchema,\n          ...schema\n        });\n      }\n\n      return parameter;\n    }\n\n    if (options.specType === SpecTypes.OPENAPI) {\n      if ([\"query\"].includes(this.get(\"in\")) && jsonSchema.$ref) {\n        if (!parameter.name) {\n          return this.refToParameters(parameter, options, schemasContainer);\n        }\n\n        parameter.style = \"deepObject\";\n      }\n    }\n\n    if (options.specType === SpecTypes.SWAGGER) {\n      if (!jsonSchema.$ref && Object.keys(jsonSchema).length === 1) {\n        parameter.type = jsonSchema.type;\n        return parameter;\n      }\n\n      if ([\"formData\", \"query\"].includes(this.get(\"in\"))) {\n        if (jsonSchema.$ref) {\n          return this.refToParameters(parameter, options, schemasContainer);\n        }\n\n        if (jsonSchema.type === \"array\") {\n          const {minLength, ...props} = jsonSchema;\n          return cleanObject(\n            {\n              ...parameter,\n              ...props,\n              type: \"array\",\n              collectionFormat: \"multi\",\n              items: {\n                type: \"string\"\n              }\n            },\n            IGNORE_OS2_PROPS\n          );\n        }\n      }\n\n      if (this.get(\"in\") !== \"body\") {\n        return cleanObject(\n          {\n            ...parameter,\n            ...jsonSchema\n          },\n          IGNORE_OS2_PROPS\n        );\n      }\n    }\n\n    parameter.schema = jsonSchema;\n\n    return parameter;\n  }\n\n  private refToParameters(parameter: any, options: JsonSchemaOptions, schemasContainer: Map<string, OS3Schema | OS2Schema>) {\n    const schema = options.schemas![this.$schema.getName()];\n\n    if (options.schemas![this.$schema.getName()] && !schemasContainer.has(this.$schema.getName())) {\n      delete options.schemas![this.$schema.getName()];\n    }\n\n    return Object.entries(schema.properties || {}).reduce((params, [key, {description, ...prop}]: [string, any]) => {\n      if (options.specType === SpecTypes.OPENAPI) {\n        return [\n          ...params,\n          cleanObject({\n            ...parameter,\n            name: key,\n            required: (schema.required || []).includes(key),\n            description,\n            schema: prop,\n            style: prop.$ref ? \"deepObject\" : undefined\n          })\n        ];\n      }\n\n      return [\n        ...params,\n        cleanObject({\n          ...parameter,\n          name: key,\n          required: (schema.required || []).includes(key),\n          description,\n          ...prop\n        })\n      ];\n    }, []);\n  }\n}\n","import {\n  decoratorTypeOf,\n  DecoratorTypes,\n  descriptorOf,\n  Entity,\n  EntityOptions,\n  isClass,\n  isCollection,\n  isPromise,\n  Metadata,\n  Store,\n  Type\n} from \"@tsed/core\";\nimport {JsonEntitiesContainer} from \"../registries/JsonEntitiesContainer\";\nimport {getJsonEntityStore} from \"../utils/getJsonEntityStore\";\nimport {JsonOperation} from \"./JsonOperation\";\nimport {JsonParameter} from \"./JsonParameter\";\nimport {JsonSchema} from \"./JsonSchema\";\n\nexport interface JsonEntityStoreOptions extends EntityOptions {\n  [key: string]: any;\n}\n\nconst getSchema = (type: any) => {\n  if (isCollection(type) || !isClass(type)) {\n    return JsonSchema.from({\n      type\n    });\n  }\n\n  return getJsonEntityStore(type).schema;\n};\n\nexport class JsonEntityStore extends Entity implements JsonEntityStoreOptions {\n  readonly store: Store;\n  readonly isStore = true;\n  /**\n   * List of children JsonEntityStore (properties or methods or params)\n   */\n  readonly children: Map<string | number, JsonEntityStore> = new Map();\n  /**\n   * Path used to generate open spec.\n   */\n  public path: string = \"/\";\n  /**\n   * Ref to JsonSchema\n   */\n  protected _schema: JsonSchema;\n  /**\n   * Ref to JsonOperation when the decorated object is a method.\n   */\n  protected _operation: JsonOperation;\n  /**\n   * Ref to JsonParameter when the decorated object is a parameter.\n   */\n  protected _parameter: JsonParameter;\n\n  [key: string]: any;\n\n  constructor(options: JsonEntityStoreOptions) {\n    super(options);\n    this.store = options.store;\n\n    /* istanbul ignore next */\n    if (options.children) {\n      this.children = options.children;\n    }\n\n    this.build();\n  }\n\n  /**\n   * Return the JsonSchema\n   */\n  get schema(): JsonSchema {\n    return this._schema;\n  }\n\n  /**\n   * Return the JsonOperation\n   */\n  get operation(): JsonOperation | undefined {\n    return this._operation;\n  }\n\n  /**\n   * Return the JsonParameter\n   */\n  get parameter(): JsonParameter | undefined {\n    return this._parameter;\n  }\n\n  get nestedGenerics(): Type<any>[][] {\n    switch (this.decoratorType) {\n      case DecoratorTypes.PARAM:\n        return this.parameter!.nestedGenerics;\n      default:\n        return this.schema.nestedGenerics;\n    }\n  }\n\n  set nestedGenerics(nestedGenerics: Type<any>[][]) {\n    switch (this.decoratorType) {\n      case DecoratorTypes.PARAM:\n        this.parameter!.nestedGenerics = nestedGenerics;\n        break;\n      default:\n        this.schema.nestedGenerics = nestedGenerics;\n        break;\n    }\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> | any {\n    return this._type;\n  }\n\n  /**\n   * Get original type without transformation\n   * @param value\n   */\n  set type(value: Type<any> | any) {\n    this._type = value;\n    this.build();\n  }\n\n  /**\n   * Return the itemSchema computed type. if the type is a function used for recursive model, the function will be called to\n   * get the right type.\n   */\n  get computedType() {\n    return this.itemSchema.getComputedType();\n  }\n\n  get itemSchema(): JsonSchema {\n    return this.isCollection ? this.schema.itemSchema() : this.schema;\n  }\n\n  get parentSchema(): JsonSchema {\n    return this.parent.schema;\n  }\n\n  get parent(): JsonEntityStore {\n    const {target, propertyKey, decoratorType} = this;\n\n    switch (decoratorType) {\n      case DecoratorTypes.PARAM:\n        return JsonEntityStore.fromMethod(target, propertyKey as string);\n      case DecoratorTypes.METHOD:\n      case DecoratorTypes.PROP:\n        return JsonEntityStore.from(target);\n    }\n\n    return this;\n  }\n\n  /**\n   * Return the required state.\n   * @returns {boolean}\n   */\n  get required(): boolean {\n    switch (this.decoratorType) {\n      case DecoratorTypes.PROP:\n        return this.parent.schema.isRequired(this.propertyKey as string);\n      case DecoratorTypes.PARAM:\n        return this.parameter!.get(\"required\");\n    }\n\n    return false;\n  }\n\n  /**\n   * Change the state of the required data.\n   * @param value\n   */\n  set required(value: boolean) {\n    switch (this.decoratorType) {\n      case DecoratorTypes.PROP:\n        if (value) {\n          this.parent.schema.addRequired(this.propertyKey as string);\n        } else {\n          this.parent.schema.removeRequired(this.propertyKey as string);\n        }\n        break;\n      case DecoratorTypes.PARAM:\n        this.parameter!.required(value);\n        break;\n    }\n  }\n\n  get allowedRequiredValues() {\n    return this.schema.$allow;\n  }\n\n  /**\n   *\n   * @param args\n   */\n  static from<T extends JsonEntityStore = JsonEntityStore>(...args: any[]) {\n    return getJsonEntityStore<T>(...args);\n  }\n\n  static fromMethod(target: any, propertyKey: string | symbol) {\n    return this.from(target, propertyKey, descriptorOf(target, propertyKey));\n  }\n\n  getResponseOptions(contentType: string = \"application/json\"): undefined | any {\n    const media = this.operation?.getResponseOf(this.statusCode)?.getMedia(contentType, false);\n\n    if (media && media.has(\"schema\")) {\n      const schema = media.get(\"schema\") as JsonSchema;\n\n      return {type: schema.getComputedItemType(), groups: media.groups};\n    }\n\n    return {type: this.type};\n  }\n\n  /**\n   * Check precondition between value, required and allowedRequiredValues to know if the entity is required.\n   * @param value\n   * @returns {boolean}\n   */\n  isRequired(value: any): boolean {\n    return this.required && [undefined, null, \"\"].includes(value) && !this.allowedRequiredValues.includes(value);\n  }\n\n  protected build() {\n    if (!this._type) {\n      let type: any;\n\n      switch (this.decoratorType) {\n        case DecoratorTypes.PARAM:\n          type = Metadata.getParamTypes(this.target, this.propertyKey)[this.index!];\n          break;\n        case DecoratorTypes.CLASS:\n          type = this.target;\n          break;\n        case DecoratorTypes.PROP:\n          type = Metadata.getType(this.target, this.propertyKey);\n          break;\n        case DecoratorTypes.METHOD:\n          type = Metadata.getReturnType(this.target, this.propertyKey);\n          type = isPromise(type) ? undefined : type;\n          break;\n      }\n\n      if (isCollection(type)) {\n        this.collectionType = type;\n      } else {\n        this._type = type;\n      }\n    }\n\n    this._type = this._type || Object;\n\n    switch (this.decoratorType) {\n      default:\n        this._schema = JsonSchema.from();\n        break;\n\n      case DecoratorTypes.CLASS:\n        this._schema = JsonSchema.from({\n          type: this.type\n        });\n        break;\n      case DecoratorTypes.METHOD:\n        this._operation = this.createOperation();\n        break;\n      case DecoratorTypes.PARAM:\n        this._parameter = this.createParameter();\n        break;\n      case DecoratorTypes.PROP:\n        this._schema = this.createProperty();\n        break;\n    }\n  }\n\n  protected createProperty(): any {\n    const parentStore = this.parent;\n\n    const properties = parentStore.schema.get(\"properties\");\n    let schema: JsonSchema = properties[this.propertyName];\n\n    if (!schema) {\n      parentStore.children.set(this.propertyName, this);\n\n      schema = JsonSchema.from({\n        type: this.collectionType || this.type\n      });\n\n      if (this.collectionType) {\n        schema.itemSchema(this.type);\n      }\n    }\n\n    parentStore.schema.addProperty(this.propertyName, schema);\n\n    return schema;\n  }\n\n  protected createOperation(): JsonOperation {\n    const parentStore = this.parent;\n\n    // response schema of the method\n    let operation = this.operation;\n\n    if (!operation) {\n      operation = new JsonOperation();\n      parentStore.children.set(this.propertyName, this);\n    }\n\n    if (isCollection(this._type)) {\n      this.collectionType = this._type;\n      // @ts-ignore\n      delete this._type;\n    }\n\n    this._schema = JsonSchema.from({\n      type: this.collectionType || this.type\n    });\n\n    if (this.collectionType) {\n      this._schema.itemSchema(this.type);\n    }\n\n    parentStore.schema.addProperty(this.propertyName, this.schema);\n\n    return operation;\n  }\n\n  protected createParameter(): JsonParameter {\n    const parentStore = this.parent;\n    let parameter = this.parameter;\n\n    if (!parameter) {\n      parameter = new JsonParameter();\n      parentStore.children.set(this.index!, this);\n\n      this._schema = getSchema(this.collectionType || this.type);\n\n      parameter.schema(this._schema);\n\n      if (this.collectionType) {\n        this._schema.itemSchema(getSchema(this.type));\n      }\n\n      parentStore.operation?.addParameter(this.index as number, parameter);\n    }\n\n    return parameter;\n  }\n}\n\nJsonEntitiesContainer.set(\"default\", JsonEntityStore);\n","import {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {JsonSchema} from \"../domain/JsonSchema\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {mapGenericsOptions, popGenerics} from \"../utils/generics\";\nimport {createRef, createRefName} from \"../utils/ref\";\n\nexport function classMapper(value: JsonSchema, options: JsonSchemaOptions = {}) {\n  const store = JsonEntityStore.from(value.class);\n  const name = createRefName(store.schema.getName() || value.getName(), options);\n\n  if (value.hasGenerics) {\n    // Inline generic\n    const {type, properties, additionalProperties, items, ...props} = value.toJSON(options);\n    const schema = {\n      ...execMapper(\"any\", store.schema, {\n        ...options,\n        ...popGenerics(value),\n        root: false\n      }),\n      ...props\n    };\n\n    if (schema.title) {\n      const name = createRefName(schema.title, options);\n      options.schemas![name] = schema;\n      delete schema.title;\n\n      return createRef(name, value, options);\n    }\n\n    return schema;\n  }\n\n  if (options.schemas && !options.schemas[name]) {\n    options.schemas[name] = {}; // avoid infinite calls\n    options.schemas[name] = execMapper(\n      \"any\",\n      store.schema,\n      mapGenericsOptions({\n        ...options,\n        root: false\n      })\n    );\n  }\n\n  return createRef(name, value, options);\n}\n\nregisterJsonSchemaMapper(\"class\", classMapper);\n","import {isClass, isPrimitiveClass} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {GenericsContext, popGenerics} from \"../utils/generics\";\nimport {getJsonType} from \"../utils/getJsonType\";\n\n/**\n * @ignore\n */\nexport function genericsMapper(obj: any, options: GenericsContext) {\n  const {generics} = options;\n\n  if (generics && obj.$ref) {\n    if (generics.has(obj.$ref)) {\n      let type = generics.get(obj.$ref);\n\n      if (isPrimitiveClass(type)) {\n        return {\n          type: getJsonType(type)\n        };\n      }\n\n      if (type === Date) {\n        return {\n          type: \"string\",\n          format: \"date-time\"\n        };\n      }\n\n      if (type.toJSON) {\n        return type.toJSON({\n          ...options,\n          generics: undefined\n        });\n      }\n\n      if (type === Object) {\n        return {\n          type: \"object\"\n        };\n      }\n\n      if (isClass(type)) {\n        const model = {\n          class: type\n        };\n\n        if (options.nestedGenerics.length === 0) {\n          return execMapper(\"class\", model as any, {\n            ...options,\n            generics: undefined\n          });\n        }\n\n        const store = JsonEntityStore.from(model.class);\n\n        return execMapper(\"schema\", store.schema, {\n          ...options,\n          ...popGenerics(options),\n          root: false\n        });\n      }\n    }\n  }\n\n  return obj;\n}\n\nregisterJsonSchemaMapper(\"generics\", genericsMapper);\n","import {ancestorsOf, Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\n\n/**\n * Return store and his inherited stores\n * @param target\n * @ignore\n */\nexport function getInheritedStores(target: Type<any> | any): Map<Type<any>, JsonEntityStore> {\n  const store: any = target.isStore ? target : getJsonEntityStore(target);\n\n  if (!store.$inherited) {\n    store.$inherited = ancestorsOf(store.target)\n      .reverse()\n      .reduce((context, model) => {\n        return context.set(model, getJsonEntityStore(model));\n      }, new Map());\n  }\n\n  return store.$inherited;\n}\n","import {classOf, deepMerge} from \"@tsed/core\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {getInheritedStores} from \"../utils/getInheritedStores\";\n\n/**\n * @ignore\n */\nexport function inheritedClassMapper(obj: any, {target, ...options}: JsonSchemaOptions = {}) {\n  const stores = Array.from(getInheritedStores(target).entries()).filter(([model]) => classOf(model) !== classOf(target));\n\n  if (stores.length) {\n    const schema = stores.reduce((obj, [, store]) => {\n      return deepMerge(obj, execMapper(\"schema\", store.schema, options));\n    }, {});\n\n    obj = deepMerge(schema, obj);\n  }\n\n  return obj;\n}\n\nregisterJsonSchemaMapper(\"inheritedClass\", inheritedClassMapper);\n","import {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\n\nexport function itemMapper(value: any, options: JsonSchemaOptions) {\n  return value && value.isClass ? execMapper(\"class\", value, options) : execMapper(\"any\", value, options);\n}\n\nregisterJsonSchemaMapper(\"item\", itemMapper);\n","import {JsonLazyRef} from \"../domain/JsonLazyRef\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {mapGenericsOptions} from \"../utils/generics\";\nimport {createRef, toRef} from \"../utils/ref\";\n\nexport function lazyRefMapper(input: JsonLazyRef, options: JsonSchemaOptions) {\n  const name = input.name;\n\n  if (options.$refs?.find((t: any) => t === input.target)) {\n    return createRef(name, input.schema, options);\n  }\n\n  options.$refs = [...(options.$refs || []), input.target];\n\n  const schema = input.toJSON(mapGenericsOptions(options));\n\n  return toRef(input.schema, schema, options);\n}\n\nregisterJsonSchemaMapper(\"lazyRef\", lazyRefMapper);\n","import {mapGenericsOptions} from \"../utils/generics\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\n\n/**\n * Serialize class which inherit from Map like JsonMap, JsonOperation, JsonParameter.\n * @param input\n * @param ignore\n * @param options\n * @ignore\n */\nexport function mapMapper(input: Map<string, any>, {ignore = [], ...options}: JsonSchemaOptions = {}): any {\n  options = mapGenericsOptions(options);\n\n  return Array.from(input.entries()).reduce((obj: any, [key, value]) => {\n    if (ignore.includes(key)) {\n      return obj;\n    }\n\n    obj[key] = execMapper(\"item\", value, options);\n    return obj;\n  }, {});\n}\n\nregisterJsonSchemaMapper(\"map\", mapMapper);\n","import {Hooks} from \"@tsed/core\";\n\n/**\n * @ignore\n * @param schema\n * @param options\n */\nexport function alterIgnore(schema: {$hooks: Hooks}, options: any) {\n  let result = schema?.$hooks?.alter(\"ignore\", false, [options]);\n\n  if (result) {\n    return result;\n  }\n\n  if (options.groups !== false) {\n    return schema?.$hooks?.alter(\"groups\", false, [options.groups]);\n  }\n\n  return result;\n}\n","import {isArray} from \"@tsed/core\";\nimport {JsonSchema} from \"../domain/JsonSchema\";\nimport {alterIgnore} from \"../hooks/alterIgnore\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\n\n/**\n * Serialize Any object to a json schema\n * @param input\n * @param options\n * @ignore\n */\nexport function objectMapper(input: any, options: JsonSchemaOptions) {\n  const {specType, operationIdFormatter, root, schemas, genericTypes, nestedGenerics, useAlias, genericLabels, ...ctx} = options;\n\n  return Object.entries(input).reduce<any>(\n    (obj, [key, value]: [string, any | JsonSchema]) => {\n      if (options.withIgnoredProps !== false && !alterIgnore(value, ctx)) {\n        // remove groups to avoid bad schema generation over children models\n        obj[key] = execMapper(\"item\", value, {...options, groups: value?.$forwardGroups ? options.groups : undefined});\n      }\n\n      return obj;\n    },\n    isArray(input) ? [] : {}\n  );\n}\n\nregisterJsonSchemaMapper(\"object\", objectMapper);\n","/**\n * @ignore\n */\nexport type AliasType = string | number | symbol;\n/**\n * @ignore\n */\nexport type AliasMap = Map<AliasType, AliasType>;\n/**\n * @ignore\n */\nexport function mapAliasedProperties(value: any, alias: AliasMap) {\n  return Object.entries(value).reduce<any>((properties, [key, value]) => {\n    key = (alias.get(key) as string) || key;\n    properties[key] = value;\n\n    return properties;\n  }, {});\n}\n","import type {JsonSchema} from \"../domain/JsonSchema\";\nimport type {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\n/**\n * @ignore\n */\nexport function alterRequiredGroups(required: string[], schema: JsonSchema, options: JsonSchemaOptions): string[] {\n  if (options.groups !== false) {\n    return schema?.$hooks?.alter(\"requiredGroups\", required, [options.groups]);\n  }\n\n  return required;\n}\n","import {uniq} from \"@tsed/core\";\nimport type {JsonSchema} from \"../domain/JsonSchema\";\nimport {alterRequiredGroups} from \"../hooks/alterRequiredGroups\";\nimport type {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\n\nfunction applyStringRule(obj: any, propSchema: JsonSchema) {\n  if (!propSchema?.$allow.includes(\"\")) {\n    if (([] as string[]).concat(propSchema?.get(\"type\")).includes(\"string\")) {\n      const minLength = obj?.minLength;\n      // Disallow empty string\n      if (minLength === undefined) {\n        return {\n          ...obj,\n          minLength: 1\n        };\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction mapRequiredProps(obj: any, schema: JsonSchema, options: JsonSchemaOptions = {}) {\n  const {useAlias} = options;\n  const props = Object.keys(obj.properties || {});\n\n  return (keys: string[], key: string) => {\n    const aliasedKey = useAlias ? (schema.alias.get(key) as string) || key : key;\n\n    if (props.includes(aliasedKey)) {\n      const propSchema = schema.get(\"properties\")[key];\n      const serializeSchema = obj.properties[aliasedKey];\n\n      obj.properties[aliasedKey] = applyStringRule(serializeSchema, propSchema); // applyNullRule(applyStringRule(serializeSchema, propSchema), propSchema);\n      // obj.properties[aliasedKey] = mapNullableType(obj.properties[aliasedKey]);\n\n      return keys.concat(aliasedKey);\n    }\n\n    return keys;\n  };\n}\n\nfunction extractRequiredProps(obj: any, schema: JsonSchema, options: JsonSchemaOptions): string[] {\n  let required: string[] = obj.required || [];\n\n  required = [...required, ...schema.$required];\n\n  if (schema.get(\"properties\")) {\n    required = Object.entries(schema.get(\"properties\")).reduce((required, [key, prop]: [string, any]) => {\n      if (prop && prop.$selfRequired !== undefined) {\n        return prop.$selfRequired ? required.concat(key) : required.filter((k) => k === key);\n      }\n\n      return required;\n    }, required);\n  }\n\n  return alterRequiredGroups(uniq(required), schema, options);\n}\n\n/**\n * @ignore\n */\nexport function getRequiredProperties(obj: any, schema: JsonSchema, options: JsonSchemaOptions) {\n  if (options.groups && options.groups.includes(\"partial\")) {\n    return obj;\n  }\n\n  let required = extractRequiredProps(obj, schema, options);\n\n  required = uniq(required).reduce(mapRequiredProps(obj, schema, options), []);\n\n  if (required.length) {\n    return {\n      ...obj,\n      required\n    };\n  }\n\n  return obj;\n}\n","import {cleanObject} from \"@tsed/core\";\nimport type {JsonSchema} from \"../domain/JsonSchema\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport type {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\n\nexport function mapNullableType(obj: any, schema: JsonSchema, options: JsonSchemaOptions) {\n  if (!schema.nullable) {\n    return obj;\n  }\n\n  let types: string[] = [].concat(obj.type).filter((type: string) => type !== \"null\");\n\n  switch (options.specType) {\n    case SpecTypes.SWAGGER:\n    case SpecTypes.JSON:\n      obj.type = [\"null\", ...types];\n      break;\n\n    case SpecTypes.OPENAPI:\n      if (types.length > 1) {\n        obj.oneOf = types.map((type: string) => {\n          return cleanObject({type, nullable: true});\n        }, []);\n      } else {\n        obj.type = types[0];\n        obj.nullable = true;\n      }\n  }\n\n  return obj;\n}\n","import {isObject} from \"@tsed/core\";\nimport {mapAliasedProperties} from \"../domain/JsonAliasMap\";\nimport {JsonSchema} from \"../domain/JsonSchema\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {getRequiredProperties} from \"../utils/getRequiredProperties\";\nimport {mapNullableType} from \"../utils/mapNullableType\";\n\n/**\n * @ignore\n */\nconst IGNORES = [\"name\", \"$required\", \"$hooks\", \"_nestedGenerics\", SpecTypes.OPENAPI, SpecTypes.SWAGGER, SpecTypes.JSON];\n/**\n * @ignore\n */\nconst IGNORES_OPENSPEC = [\"const\"];\nconst IGNORES_OS2 = [\"writeOnly\", \"readOnly\"];\n\n/**\n * @ignore\n */\nfunction isEmptyProperties(key: string, value: any) {\n  return typeof value === \"object\" && [\"items\", \"properties\", \"additionalProperties\"].includes(key) && Object.keys(value).length === 0;\n}\n\n/**\n * @ignore\n */\nfunction shouldMapAlias(key: string, value: any, useAlias: boolean) {\n  return typeof value === \"object\" && useAlias && [\"properties\", \"additionalProperties\"].includes(key);\n}\n\n/**\n * @ignore\n */\nfunction shouldSkipKey(key: string, {specType = SpecTypes.JSON, customKeys = false}: JsonSchemaOptions) {\n  return (\n    IGNORES.includes(key) ||\n    (key.startsWith(\"#\") && (customKeys === false || specType !== SpecTypes.JSON)) ||\n    (specType === SpecTypes.SWAGGER && IGNORES_OS2.includes(key)) ||\n    (specType !== SpecTypes.JSON && IGNORES_OPENSPEC.includes(key))\n  );\n}\n\nexport function schemaMapper(schema: JsonSchema, options: JsonSchemaOptions = {}): any {\n  const {useAlias = true, schemas = {}, genericTypes} = options;\n\n  let obj: any = [...schema.entries()].reduce((item: any, [key, value]) => {\n    if (shouldSkipKey(key, options)) {\n      return item;\n    }\n\n    key = key.replace(/^#/, \"\");\n\n    if (key === \"type\") {\n      value = schema.getJsonType();\n    }\n\n    if (key === \"examples\" && isObject(value) && [SpecTypes.OPENAPI, SpecTypes.SWAGGER].includes(options.specType!)) {\n      key = \"example\";\n      value = Object.values(value)[0];\n    }\n\n    if (value) {\n      if (value.isClass) {\n        value = execMapper(\"class\", value, {\n          ...options,\n          useAlias,\n          schemas\n        });\n      } else {\n        value = execMapper(\"any\", value, {\n          ...options,\n          useAlias,\n          schemas,\n          genericTypes,\n          genericLabels: schema.genericLabels\n        });\n      }\n    }\n\n    if (isEmptyProperties(key, value)) {\n      return item;\n    }\n\n    if (shouldMapAlias(key, value, useAlias)) {\n      value = mapAliasedProperties(value, schema.alias);\n    }\n\n    item[key] = value;\n\n    return item;\n  }, {});\n\n  if (schema.isClass) {\n    obj = execMapper(\"inheritedClass\", obj, {...options, root: false, schemas, target: schema.getComputedType()});\n  }\n\n  obj = execMapper(\"generics\", obj, {...options, root: false, schemas} as any);\n\n  if (schema.has(options.specType as string)) {\n    obj = {\n      ...obj,\n      ...schema.get(options.specType as string).toJSON(options)\n    };\n  }\n\n  obj = getRequiredProperties(obj, schema, {...options, useAlias});\n  obj = mapNullableType(obj, schema, options);\n\n  if ((obj.oneOf || obj.allOf || obj.anyOf) && !(obj.items || obj.properties)) {\n    delete obj.type;\n  }\n\n  return obj;\n}\n\nregisterJsonSchemaMapper(\"schema\", schemaMapper);\n","import {Type} from \"@tsed/core\";\nimport \"../components\";\nimport type {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {execMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {getJsonEntityStore, isJsonEntityStore} from \"./getJsonEntityStore\";\n\n/**\n * @ignore\n */\nconst CACHE_KEY = \"$cache:schemes\";\n\n/**\n * @ignore\n */\nfunction getKey(options: any) {\n  return JSON.stringify(options);\n}\n\n/**\n * @ignore\n */\nfunction get(entity: JsonEntityStore, options: any) {\n  const cache: Map<string, any> = entity.store.get(CACHE_KEY) || new Map();\n  const key = getKey(options);\n\n  if (!cache.has(key)) {\n    const schema = execMapper(\"schema\", entity.schema, options);\n\n    if (Object.keys(options.schemas).length) {\n      schema.definitions = options.schemas;\n    }\n\n    cache.set(key, schema);\n  }\n\n  entity.store.set(CACHE_KEY, cache);\n\n  return cache.get(key);\n}\n\nexport function getJsonSchema(model: Type<any> | JsonEntityStore, options: JsonSchemaOptions = {}) {\n  const entity = isJsonEntityStore(model) ? model : getJsonEntityStore(model);\n\n  options = {\n    endpoint: true,\n    groups: [],\n    ...options,\n    specType: options.specType || SpecTypes.JSON,\n    schemas: {}\n  };\n\n  if (entity.decoratorType === \"parameter\") {\n    options = {\n      ...options,\n      genericTypes: entity.nestedGenerics[0],\n      nestedGenerics: entity.nestedGenerics,\n      groups: entity.parameter?.groups\n    };\n  }\n\n  return get(entity, options);\n}\n","import {Type} from \"@tsed/core\";\nimport type {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {alterIgnore} from \"../hooks/alterIgnore\";\nimport {getInheritedStores} from \"./getInheritedStores\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\n\n/**\n * Return the list of properties including properties from inherited classes\n * @param target\n * @ignore\n */\nexport function getPropertiesStores<T extends JsonEntityStore = JsonEntityStore>(\n  target: Type<any> | any\n): Map<string | symbol | number, T> {\n  const store: any = target.isStore ? target : getJsonEntityStore(target);\n\n  if (!store.$properties) {\n    const stores = getInheritedStores(store);\n    store.$properties = new Map();\n\n    stores.forEach((currentStore) => {\n      currentStore.children.forEach((propStore) => {\n        if (!store.$properties.has(propStore.propertyKey)) {\n          store.$properties.set(propStore.propertyKey, propStore);\n        }\n      });\n    });\n  }\n\n  return store.$properties;\n}\n\n/**\n * @ignore\n */\nexport interface GetPropertiesOptions {\n  withIgnoredProps?: boolean;\n  groups?: string[] | false;\n\n  [type: string]: any;\n}\n\n/**\n * @ignore\n */\nexport function getProperties<T extends JsonEntityStore = JsonEntityStore>(target: Type<any> | any, options: GetPropertiesOptions = {}) {\n  const stores = getPropertiesStores<T>(target);\n  const map: Map<string | symbol | number, T> = new Map();\n\n  stores.forEach((store, key) => {\n    if (!options.withIgnoredProps) {\n      if (alterIgnore(store.itemSchema, options)) {\n        return;\n      }\n    }\n\n    map.set(key, store);\n  });\n\n  return map;\n}\n","import {Type} from \"@tsed/core\";\nimport type {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {getInheritedStores} from \"./getInheritedStores\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\n\n/**\n * @ignore\n */\nexport function getOperationsStores<T = JsonEntityStore>(target: Type<any> | any): Map<string, T> {\n  const store: any = target.isStore ? target : getJsonEntityStore(target);\n\n  if (!store.$operations) {\n    const stores = getInheritedStores(store);\n    store.$operations = new Map();\n\n    stores.forEach((currentStore) => {\n      currentStore.children.forEach((propStore) => {\n        if (propStore.operation && !store.$operations.has(propStore.propertyKey)) {\n          store.$operations.set(propStore.propertyKey, propStore);\n        }\n      });\n    });\n  }\n\n  return store.$operations;\n}\n","/**\n * Return a sanitized path\n * @param path\n * @ignore\n */\nexport function buildPath(path: string) {\n  return path.split(\"/\").filter(Boolean).join(\"/\");\n}\n","/**\n * @ignore\n */\nexport function concatParameters(parameters: any[], operation: any) {\n  return parameters\n    .map((param) => {\n      const f = operation.parameters.find((p: any) => p.in === param.in && p.name === param.name);\n\n      return f || param;\n    })\n    .concat(...operation.parameters.filter((param: any) => param.in !== \"path\"));\n}\n","/**\n * @ignore\n */\nfunction getVariable(subpath: string) {\n  const [prefix, right] = subpath.split(\"=\");\n  const splited = (right || prefix).split(\".\");\n  const name = splited.splice(0, 1)[0];\n\n  return {\n    prefix: right && prefix ? `${prefix}=` : \"\",\n    name,\n    postfix: splited.length ? `.${splited.join(\".\")}` : \"\"\n  };\n}\n\n/**\n * @ignore\n */\nexport function getJsonPathParameters(base: string, path: string | RegExp | (string | RegExp)[] = \"\"): {path: string; parameters: any[]}[] {\n  if (path instanceof RegExp) {\n    path = path.toString().replace(/^\\//, \"\").replace(/\\/$/, \"\").replace(/\\\\/, \"\");\n  }\n\n  const params: any[] = [];\n  const paths: any[] = [];\n  let isOptional = false;\n  let current = \"\";\n\n  `${base}${path}`\n    .replace(/\\((.*)\\)/gi, \"\")\n    .split(\"/\")\n    .filter((o) => !!o)\n    .map((key) => {\n      const subpath = key.replace(\":\", \"\").replace(\"?\", \"\");\n\n      if (key.includes(\":\")) {\n        const optional = key.includes(\"?\");\n\n        // Append previous config\n        if (optional && !isOptional) {\n          isOptional = true;\n\n          paths.push({\n            path: current,\n            parameters: [].concat(params as any)\n          });\n        }\n\n        const {prefix, name, postfix} = getVariable(subpath);\n        current += `/${prefix}{${name}}${postfix}`;\n\n        params.push({\n          in: \"path\",\n          name,\n          type: \"string\",\n          required: true\n        });\n\n        if (optional && isOptional) {\n          paths.push({\n            path: current,\n            parameters: [].concat(params as any)\n          });\n        }\n      } else {\n        current += `/${key}`;\n      }\n    });\n\n  return paths.length\n    ? paths\n    : [\n        {\n          path: current,\n          parameters: [].concat(params as any)\n        }\n      ];\n}\n","import {SpecTypes} from \"../domain/SpecTypes\";\nimport {concatParameters} from \"./concatParameters\";\nimport {getJsonPathParameters} from \"./getJsonPathParameters\";\n\n/**\n * @ignore\n */\nexport interface MergeOperationOptions {\n  rootPath: string;\n  specType: SpecTypes;\n  operationId: (path: string) => string | undefined;\n  defaultTags: string[];\n  tags: string[];\n  path: string;\n  method: string;\n}\n\n/**\n * @ignore\n */\nexport function mergeOperation(\n  obj: any,\n  operation: any,\n  {rootPath, specType, operationId, defaultTags, tags, path, method}: MergeOperationOptions\n) {\n  const pathParameters = getJsonPathParameters(rootPath, path).map(({path, parameters}) => {\n    path = path ? path : \"/\";\n\n    if (specType === SpecTypes.OPENAPI) {\n      parameters = parameters.map(({type, ...param}) => {\n        return {\n          ...param,\n          schema: {\n            type\n          }\n        };\n      });\n    }\n\n    return {path, parameters};\n  });\n\n  return pathParameters.reduce((obj, {path, parameters}) => {\n    parameters = concatParameters(parameters, operation);\n    path = path ? path : \"/\";\n\n    const operationTags = operation.tags?.length ? operation.tags : [defaultTags];\n\n    obj.paths[path] = {\n      ...obj.paths[path],\n      [method.toLowerCase()]: {\n        operationId: operation.operationId || operationId(path),\n        ...operation,\n        tags: operationTags.map(({name}: any) => name),\n        parameters\n      }\n    };\n\n    tags.push(...operationTags);\n\n    return obj;\n  }, obj);\n}\n","import {camelCase} from \"change-case\";\n\nconst DEFAULT_PATTERN = \"%c.%m\";\n\n/**\n * @ignore\n */\nexport function operationIdFormatter(pattern: string = \"\") {\n  const OPERATION_IDS = new Map<string, number>();\n\n  const transform = (name: string, propertyKey: string) => {\n    const str = (pattern || DEFAULT_PATTERN).replace(/%c/, name).replace(/%m/, propertyKey);\n    return pattern === \"\" ? camelCase(str) : str;\n  };\n\n  return (name: string, propertyKey: string, path: string = \"\") => {\n    const operationId = transform(name, propertyKey);\n    const operationKey = name + propertyKey;\n\n    if (!OPERATION_IDS.has(operationKey)) {\n      OPERATION_IDS.set(operationKey, 0);\n\n      return operationId;\n    }\n\n    // try with paths\n    const result = path.match(/{(\\w+)}/gi);\n    if (result) {\n      const operationKey = name + propertyKey + result[0];\n\n      if (!OPERATION_IDS.has(operationKey)) {\n        OPERATION_IDS.set(operationKey, 0);\n\n        return camelCase(`${operationId} By ${result}`);\n      }\n    }\n\n    const id = OPERATION_IDS.get(operationKey)! + 1;\n    OPERATION_IDS.set(operationKey, id);\n\n    return `${operationId}_${id}`;\n  };\n}\n","import {cleanObject, Type, uniqBy} from \"@tsed/core\";\nimport {OpenSpec2, OpenSpec3} from \"@tsed/openspec\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {buildPath} from \"./buildPath\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\nimport {getOperationsStores} from \"./getOperationsStores\";\nimport {mergeOperation} from \"./mergeOperation\";\nimport {operationIdFormatter} from \"./operationIdFormatter\";\n\nexport interface SpecSerializerOptions extends JsonSchemaOptions {\n  specType?: SpecTypes.SWAGGER | SpecTypes.OPENAPI;\n  /**\n   * Paths\n   */\n  paths?: any;\n  /**\n   * Root path. This paths will be added to all generated paths Object.\n   */\n  rootPath?: string;\n  /**\n   * A function to generate the operationId.\n   */\n  operationIdFormatter?: (name: string, propertyKey: string, path: string) => string;\n  /**\n   * A pattern to generate the operationId.\n   */\n  operationIdPattern?: string;\n}\n\nexport interface OS3SpecSerializerOptions extends SpecSerializerOptions {\n  /**\n   * Define Spec types level\n   */\n  specType: SpecTypes.OPENAPI;\n}\n\nexport interface OS2SpecSerializerOptions extends SpecSerializerOptions {\n  /**\n   * Define Spec types level\n   */\n  specType: SpecTypes.SWAGGER;\n}\n\n/**\n * @ignore\n */\nconst caches: Map<Type<any>, Map<string, any>> = new Map();\n\n/**\n * @ignore\n */\nfunction get(model: Type<any>, options: any, cb: any) {\n  if (!caches.has(model)) {\n    caches.set(model, new Map());\n  }\n\n  const cache = caches.get(model)!;\n  const key = JSON.stringify(options);\n\n  if (!cache.has(key)) {\n    cache.set(key, cb());\n  }\n\n  return cache.get(key);\n}\n\n/**\n * Return the swagger or open spec for the given class.\n * @param model\n * @param options\n */\nexport function getSpec(model: Type<any>, options: OS2SpecSerializerOptions): Partial<OpenSpec2>;\nexport function getSpec(model: Type<any>): Partial<OpenSpec2>;\nexport function getSpec(model: Type<any>, options: SpecSerializerOptions): Partial<OpenSpec2>;\n/**\n * Return the swagger or open spec for the given class.\n * @param model\n * @param options\n */\nexport function getSpec(model: Type<any>, options: OS3SpecSerializerOptions): Partial<OpenSpec3>;\n/**\n * Return the swagger or open spec for the given class.\n * @param model\n * @param options\n */\nexport function getSpec(model: Type<any>, options: SpecSerializerOptions = {specType: SpecTypes.SWAGGER}): Partial<OpenSpec2 | OpenSpec3> {\n  if (!options.specType) {\n    options.specType = SpecTypes.SWAGGER;\n  }\n\n  options = {\n    ...options,\n    operationIdFormatter: options.operationIdFormatter || operationIdFormatter(options.operationIdPattern),\n    root: false,\n    specType: options.specType\n  };\n\n  return get(model, options, () => {\n    const store = getJsonEntityStore(model);\n    const {specType = SpecTypes.SWAGGER, schemas = {}, paths = {}, rootPath = \"/\", tags = []} = options;\n    const ctrlPath = store.path;\n    const defaultTags = cleanObject({\n      name: store.schema.getName(),\n      description: store.schema.get(\"description\")\n    });\n\n    const specJson: any = {paths};\n\n    getOperationsStores(model).forEach((operationStore) => {\n      if (operationStore.store.get(\"hidden\")) {\n        return;\n      }\n\n      const operation = operationStore.operation!.toJSON({...options, specType, schemas});\n\n      operationStore.operation!.operationPaths.forEach(({path, method}: {path: string; method: string}) => {\n        if (method) {\n          mergeOperation(specJson, operation, {\n            rootPath: buildPath(rootPath + ctrlPath),\n            path,\n            method,\n            defaultTags,\n            tags,\n            specType,\n            operationId: (path: string) =>\n              options.operationIdFormatter!(\n                operationStore.parent.schema.get(\"name\") || operationStore.parent.targetName,\n                operationStore.propertyName,\n                path\n              )\n          });\n        }\n      });\n    });\n\n    specJson.tags = uniqBy(tags, \"name\");\n\n    if (Object.keys(schemas).length) {\n      if (specType === SpecTypes.OPENAPI) {\n        specJson.components = {\n          schemas\n        };\n      } else {\n        specJson.definitions = schemas;\n      }\n    }\n\n    return specJson;\n  });\n}\n","import {cleanObject, deepMerge, mergeReducerBuilder} from \"@tsed/core\";\nimport {OpenSpec2, OpenSpec3} from \"@tsed/openspec\";\n\n/**\n * @ignore\n */\nexport const schemesReducer = mergeReducerBuilder(\n  (current, value) => (current.type && current.type === value.type) || (current.$ref && current.$ref === value.$ref)\n);\n\n/**\n * @ignore\n */\nexport const parameters = mergeReducerBuilder((current, value) => current.in === value.in && current.name === value.name);\n\n/**\n * @ignore\n */\nexport const security = mergeReducerBuilder((current, value) => {\n  return !!Object.keys(value).find((key) => !!current[key]);\n});\n\n/**\n * @ignore\n */\nexport const tagsReducer = mergeReducerBuilder((current, value) => current.name === value.name);\n\n/**\n * @ignore\n */\nconst SPEC_REDUCERS = {\n  security,\n  parameters,\n  oneOf: schemesReducer,\n  anyOf: schemesReducer,\n  allOf: schemesReducer,\n  tags: tagsReducer\n};\n\n/**\n * Merge two spec\n * @param spec\n * @param input\n */\nexport function mergeSpec<Spec = OpenSpec2 | OpenSpec3>(spec: Partial<Spec>, input: Partial<Spec>): Partial<Spec> {\n  return deepMerge(spec, input, {\n    reducers: SPEC_REDUCERS,\n    cleanUndefinedProps: true\n  });\n}\n","export enum JsonFormatTypes {\n  DATE_TIME = \"date-time\",\n  DATE = \"date\",\n  TIME = \"time\",\n  EMAIL = \"email\",\n  HOSTNAME = \"hostname\",\n  IPV4 = \"ipv4\",\n  IPV6 = \"ipv6\",\n  URI = \"uri\",\n  URL = \"url\",\n  URI_REF = \"uri-reference\",\n  URI_TEMPLATE = \"uri-template\",\n  JSON_POINTER = \"json-pointer\",\n  RELATIVE_JSON_POINTER = \"relative-json-pointer\",\n  UUID = \"uuid\",\n  REGEX = \"regex\"\n}\n","import {isClass, Type} from \"@tsed/core\";\nimport {JsonEntityStore, JsonFormatTypes} from \"../domain\";\nimport {JsonLazyRef} from \"../domain/JsonLazyRef\";\nimport {JsonSchema} from \"../domain/JsonSchema\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\n\n/**\n * Create a new model from the given type.\n *\n * ```typescript\n * from(String)\n * ```\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function from(type: Type<any> = Object) {\n  if (isClass(type)) {\n    const {schema} = getJsonEntityStore(type);\n\n    schema.properties = function properties(obj: {[key: string]: JsonSchema}) {\n      Object.entries(obj).forEach(([propertyKey, propSchema]) => {\n        getJsonEntityStore(type.prototype, propertyKey).schema.assign(propSchema);\n      });\n\n      return this;\n    };\n\n    return schema;\n  }\n\n  return JsonSchema.from({type});\n}\n\n/**\n * Declare a new number model.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function number() {\n  return from(Number);\n}\n\n/**\n * Declare a new integer model.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function integer() {\n  return from(Number).integer();\n}\n\n/**\n * Declare a new string model.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function string() {\n  return from(String);\n}\n\n/**\n * Declare a new boolean model.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function boolean() {\n  return from(Boolean);\n}\n\n/**\n * Declare a new string model with `format: date`.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function date() {\n  return from(Date).format(JsonFormatTypes.DATE);\n}\n\n/**\n * Declare a new string model with `format: datetime`.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function datetime() {\n  return from(Date).format(JsonFormatTypes.DATE_TIME);\n}\n\n/**\n * Declare a new string model with `format: time`.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function time() {\n  return from(Date).format(JsonFormatTypes.TIME);\n}\n\n/**\n * Declare a new string model with `format: email`.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function email() {\n  return from(String).format(JsonFormatTypes.EMAIL);\n}\n\n/**\n * Declare a new string model with `format: uri`.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function uri() {\n  return from(String).format(JsonFormatTypes.URI);\n}\n\n/**\n * Declare a new string model with `format: url`.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function url() {\n  return from(String).format(JsonFormatTypes.URL);\n}\n\n/**\n * Declare a new object model with `additionalProperties: true`.\n *\n * ```json\n * {\n *   \"type\": \"array\"\n * }\n * ```\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function array() {\n  return from(Array);\n}\n\n/**\n * Declare a new object model with `additionalProperties: true`.\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"additionalProperties\": true\n * }\n * ```\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function map() {\n  return from(Map).unknown(true);\n}\n\n/**\n * Declare a new array model with `uniqueItems: true`.\n *\n * ```json\n * {\n *   \"type\": \"array\",\n *   \"uniqueItems\": true\n * }\n * ```\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function set() {\n  return from(Array).uniqueItems(true);\n}\n\n/**\n * Declare a new object model.\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function object(properties: {[key: string]: JsonSchema} = {}) {\n  return from(Object).properties(properties);\n}\n\n/**\n * Declare a model with any type (By default: `integer`, `number`, `string`, `boolean`, `array`, `object`, `null`)\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n */\nexport function any(...types: any[]) {\n  return from().any(...types);\n}\n\n/**\n * See https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.27\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.27\n * @schemaFunctional\n */\nexport function anyOf(...anyOf: any[]) {\n  return from().anyOf(anyOf);\n}\n\n/**\n * See https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.28\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @schemaFunctional\n * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.28\n */\nexport function oneOf(...oneOf: any[]) {\n  return from().oneOf(oneOf);\n}\n\n/**\n * See https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.26\n *\n *  * See @@JsonSchema@@ to discover available methods.\n *\n * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.26\n * @schemaFunctional\n */\nexport function allOf(...allOf: any[]) {\n  return from().allOf(allOf);\n}\n\n/**\n * Declare a sub schema which will be resolved later. Use this function when you have a circular reference between two schemes.\n *\n * @schemaFunctional\n */\nexport function lazyRef(cb: () => Type<any>) {\n  try {\n    // solve issue with a self referenced model\n    if (cb()) {\n      // type is already accessible\n      return JsonEntityStore.from(cb()).schema as any;\n    }\n  } catch (er) {}\n\n  return new JsonLazyRef(cb);\n}\n","import {Type} from \"@tsed/core\";\n\nconst statusesModel: Map<number, Type<any>> = new Map();\n\nexport function defineStatusModel(status: number, model: Type<any>) {\n  statusesModel.set(status, model);\n}\n\nexport function getStatusModel(status: number) {\n  return statusesModel.get(status);\n}\n","import {Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\n\nexport interface ArrayOfChainedDecorators {\n  (...args: any): any;\n\n  /**\n   * An array instance is valid against `minItems` if its size is greater than, or equal to, the value of this keyword.\n   *\n   * ::: warning\n   * The value `minItems` MUST be a non-negative integer.\n   * :::\n   *\n   * ::: tip\n   * Omitting this keyword has the same behavior as a value of 0.\n   * :::\n   */\n  MinItems(minItems: number): this;\n\n  /**\n   * The value `maxItems` MUST be a non-negative integer.\n   *\n   * An array instance is valid against `maxItems` if its size is less than, or equal to, the value of this keyword.\n   *\n   * :: warning\n   * The value `maxItems` MUST be a non-negative integer.\n   * :::\n   */\n  MaxItems(maxItems: number): this;\n\n  /**\n   * Set the type of the item collection. The possible value is String, Boolean, Number, Date, Object, Class, etc...\n   *\n   * The array instance will be valid against \"contains\" if at least one of its elements is valid against the given schema.\n   */\n  Contains(): this;\n\n  /**\n   * If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique.\n   */\n  UniqueItems(uniqueItems: boolean): this;\n}\n\nexport interface MapOfChainedDecorators {\n  (...args: any): any;\n\n  /**\n   * An object instance is valid against `minProperties` if its number of properties is less than, or equal to, the value of this keyword.\n   *\n   * ::: warning\n   * The value of this keyword MUST be a non-negative integer.\n   * :::\n   */\n  MinProperties(minProperties: number): this;\n\n  /**\n   * An object instance is valid against `maxProperties` if its number of properties is less than, or equal to, the value of this keyword.\n   *\n   * ::: warning\n   * The value of this keyword MUST be a non-negative integer.\n   * :::\n   */\n  MaxProperties(maxProperties: number): this;\n}\n\nexport interface CollectionOfChainedDecorators extends MapOfChainedDecorators, ArrayOfChainedDecorators {}\n\n/**\n * Set the type of the item collection. The possible value is String, Boolean, Number, Date, Object, Class, etc...\n *\n * ```typescript\n * class Model {\n *    @CollectionOf(String).MinLength(0).MaxLength(0)\n *    property: string[];\n * }\n * ```\n * ::: warning\n * You mustn't use the `type Type = string | number` as parameters Type.\n *\n * This example doesn't work:\n *\n * ```typescript\n * type Type = \"string\" | \"number\"\n * class Model {\n *    @CollectionOf(Type)\n *    property: Type[];\n * }\n * ```\n * :::\n *\n * @param {Type<any>} type\n * @param collectionType\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @collections\n */\nexport function CollectionOf(type: any, collectionType?: any): CollectionOfChainedDecorators {\n  const schema: any = {};\n  let contains: boolean = false;\n\n  const decorator = (...args: any) => {\n    const store = JsonEntityStore.from(...args);\n    // const itemSchema = store.itemSchema.toJSON();\n\n    if (collectionType) {\n      store.collectionType = collectionType;\n      store.schema.type(collectionType);\n    }\n\n    store.type = type;\n    // console.log(type);\n    store.itemSchema.type(type);\n    // console.log(store.itemSchema.getComputedType(), schema);\n    // store.itemSchema.assign({...itemSchema, type});\n    store.schema.assign(schema);\n\n    if (store.isArray && contains) {\n      store.schema.set(\"contains\", store.schema.get(\"items\"));\n      store.schema.delete(\"items\");\n    }\n  };\n\n  decorator.MinItems = (minItems: number) => {\n    schema.minItems = minItems;\n\n    return decorator;\n  };\n\n  decorator.MaxItems = (maxItems: number) => {\n    schema.maxItems = maxItems;\n\n    return decorator;\n  };\n  decorator.MinProperties = (minProperties: number) => {\n    schema.minProperties = minProperties;\n\n    return decorator;\n  };\n\n  decorator.MaxProperties = (maxProperties: number) => {\n    schema.maxProperties = maxProperties;\n\n    return decorator;\n  };\n\n  decorator.Contains = () => {\n    contains = true;\n\n    return decorator;\n  };\n\n  decorator.UniqueItems = (uniqueItems = true) => {\n    schema.uniqueItems = uniqueItems;\n\n    return decorator;\n  };\n\n  return decorator;\n}\n\n/**\n * Alias of @@GenericOf@@ decorator.\n * @param type\n * @decorator\n */\nexport function ArrayOf(type: any): ArrayOfChainedDecorators {\n  return CollectionOf(type, Array);\n}\n\n/**\n * Alias of @@GenericOf@@ decorator.\n * @param type\n * @decorator\n */\nexport function MapOf(type: any): MapOfChainedDecorators {\n  return CollectionOf(type, Map);\n}\n","import {CollectionOf} from \"./collectionOf\";\n\n/**\n * Set the type of the item collection. The possible value is String, Boolean, Number, Date, Object, Class, etc...\n *\n * The array instance will be valid against \"contains\" if at least one of its elements is valid against the given schema.\n *\n * ```typescript\n * class Model {\n *    @CollectionContains(String).MinLength(0).MaxLength(0)\n *    property: string[];\n * }\n * ```\n *\n * @param {Type<any>} type\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @collections\n */\nexport function CollectionContains(type: any) {\n  return CollectionOf(type).Contains();\n}\n","import {DecoratorParameters} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain\";\nimport {getJsonEntityStore} from \"../../utils/getJsonEntityStore\";\n\n/**\n * Decorator util to compose another decorator. See @@Description@@ decorator implementation for more details.\n *\n * ## Usage\n *\n * ```typescript\n * export function Description(description: any) {\n *   return JsonEntityFn((entity: JsonEntityStore, args: DecoratorParameters) => {\n *       entity.itemSchema.description(description)\n *   });\n * }\n * ```\n *\n * @param fn\n * @decorator\n * @utils\n * @model\n */\nexport function JsonEntityFn<T extends JsonEntityStore>(fn: (entity: T, parameters: DecoratorParameters) => void): (...args: any[]) => any {\n  return (...parameters: DecoratorParameters) => {\n    const result: any = fn(getJsonEntityStore<T>(...parameters), parameters);\n    if (typeof result === \"function\") {\n      result(...parameters);\n    }\n  };\n}\n","import {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * The value `maxItems` MUST be a non-negative integer.\n *\n * An array instance is valid against `maxItems` if its size is less than, or equal to, the value of this keyword.\n *\n * :: warning\n * The value `maxItems` MUST be a non-negative integer.\n * :::\n *\n * :: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@MaxItems@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @CollectionOf(String)\n *    @MaxItems(10)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"maxItems\": 10\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} maxItems\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @collections\n */\nexport function MaxItems(maxItems: number) {\n  if (maxItems < 0) {\n    throw new Error(\"The value of maxItems MUST be a non-negative integer.\");\n  }\n\n  return JsonEntityFn((storedJson) => {\n    storedJson.schema.maxItems(maxItems);\n  });\n}\n","import {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * An array instance is valid against `minItems` if its size is greater than, or equal to, the value of this keyword.\n *\n * ::: warning\n * The value `minItems` MUST be a non-negative integer.\n * :::\n *\n * ::: tip\n * Omitting this keyword has the same behavior as a value of 0.\n * :::\n *\n * ::: warning\n * For v6 user, use @@MinItems@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @CollectionOf(String)\n *    @MinItems(10)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"minItems\": 10,\n *       \"items\": {\n *         \"type\": \"string\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} minItems\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @collections\n */\nexport function MinItems(minItems: number) {\n  if (minItems < 0) {\n    throw new Error(\"The value of minItems MUST be a non-negative integer.\");\n  }\n\n  return JsonEntityFn((storedJson) => {\n    storedJson.schema.minItems(minItems);\n  });\n}\n","import {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * If this keyword has boolean value false, the instance validates successfully. If it has boolean value true, the instance validates successfully if all of its elements are unique.\n *\n * ::: warning\n * For v6 user, use @@UniqueItems@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @UniqueItems()  // default true\n *    property: number[];\n * }\n * ```\n *\n *  * ```typescript\n * class Model {\n *    @CollectionOf(String)\n *    @UniqueItems()\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"uniqueItems\": true,\n *       \"items\": {\n *         \"type\": \"string\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {boolean} uniqueItems\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @collections\n */\nexport function UniqueItems(uniqueItems: boolean = true) {\n  return JsonEntityFn((store: JsonEntityStore) => {\n    store.schema.uniqueItems(uniqueItems);\n  });\n}\n","import {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * An object instance is valid against `maxProperties` if its number of properties is less than, or equal to, the value of this keyword.\n *\n * ::: warning\n * The value of this keyword MUST be a non-negative integer.\n * :::\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@MaxProperties@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### On prop\n * ```typescript\n * class Model {\n *    @MaxProperties(10)\n *    property: any;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"any\",\n *       \"maxProperties\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### On class\n *\n * ```typescript\n * @MaxProperties(10)\n * class Model {\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"maxProperties\": 10\n * }\n * ```\n *\n * ### On Parameter\n *\n * ```typescript\n *\n * class Model {\n *   method(@Any() @MaxProperties(10) obj: any){}\n * }\n * ```\n *\n * @param {number} maxProperties The maximum properties allowed on the given object\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @collections\n */\nexport function MaxProperties(maxProperties: number) {\n  if (maxProperties < 0) {\n    throw new Error(\"The value of maxProperties MUST be a non-negative integer.\");\n  }\n\n  return JsonEntityFn((store) => {\n    store.isCollection ? store.schema.maxProperties(maxProperties) : store.itemSchema.maxProperties(maxProperties);\n  });\n}\n","import {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * An object instance is valid against `minProperties` if its number of properties is less than, or equal to, the value of this keyword.\n *\n * ::: warning\n * The value of this keyword MUST be a non-negative integer.\n * :::\n *\n * ::: warning\n * For v6 user, use @@MinProperties@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### On prop\n * ```typescript\n * class Model {\n *    @MinProperties(10)\n *    property: any;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"any\",\n *       \"minProperties\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### On class\n *\n * ```typescript\n * @MinProperties(10)\n * class Model {\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"minProperties\": 10\n * }\n * ```\n *\n * ### On Parameter\n *\n * ```typescript\n *\n * class Model {\n *   method(@Any() @MinProperties(10) obj: any){}\n * }\n * ```\n *\n * @param {number} minProperties The minimum properties allowed on the object.\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @collections\n */\nexport function MinProperties(minProperties: number) {\n  if (minProperties < 0) {\n    throw new Error(\"The value of minProperties MUST be a non-negative integer.\");\n  }\n\n  return JsonEntityFn((store) => {\n    store.isCollection ? store.schema.minProperties(minProperties) : store.itemSchema.minProperties(minProperties);\n  });\n}\n","import {JsonEntityStore} from \"../../domain/JsonEntityStore\";\n\n/**\n * Define generics list. This list is used by @@GenericOf@@ and the @@getJsonSchema@@ function to build the correct JsonSchema.\n *\n * See @@GenericOf@@ decorator for more details.\n *\n * @param generics\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @generics\n */\nexport function Generics(...generics: string[]) {\n  return (target: any) => {\n    const storedSchema = JsonEntityStore.from(target);\n\n    storedSchema.schema.genericLabels = generics;\n  };\n}\n","import {isObject, Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {string} from \"../../utils/from\";\nimport {GenericValue} from \"../../utils/generics\";\n\n/**\n * @ignore\n */\nfunction isEnum(type: any) {\n  return isObject(type) && !(\"toJSON\" in type);\n}\n\nexport interface GenericOfChainedDecorators {\n  (...args: any): any;\n\n  /**\n   * Declare a nested generic models\n   * @param generics\n   */\n  Nested(...generics: GenericValue[]): this;\n}\n\n/**\n * Set the types of a Generic class.\n *\n * ## Example\n *\n * ```typescript\n * class Product {\n *   @Property()\n *   label: string;\n * }\n *\n * @Generics(\"T\")\n * class Paginated<T> {\n *   @CollectionOf(\"T\")\n *   data: T[];\n *\n *   @Property()\n *   totalCount: number;\n * }\n *\n * class Payload {\n *    @GenericOf(Product)\n *    products: Paginated<Product>;\n * }\n * ```\n *\n * ## Example with nested generics\n *\n * ```typescript\n * class Product {\n *   @Property()\n *   label: string;\n * }\n *\n * @Generics(\"T\")\n * class Paginated<T> {\n *   @CollectionOf(\"T\")\n *   data: T[];\n *\n *   @Property()\n *   totalCount: number;\n * }\n *\n * @Generics(\"D\")\n * class Submission<D> {\n *   @Property()\n *   _id: string;\n *\n *   @Property(\"D\")\n *   data: D;\n * }\n *\n * class Payload {\n *    @GenericOf(Submissions).Nested(Product)\n *    submissions: Paginated<Submission<Product>>;\n * }\n * ```\n *\n * @param {Type<any>[]} generics\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @generics\n */\nexport function GenericOf(...generics: GenericValue[]): GenericOfChainedDecorators {\n  const nestedGenerics: GenericValue[][] = [\n    generics.map((type) => {\n      if (isEnum(type)) {\n        return string().enum(Object.values(type));\n      }\n      return type;\n    })\n  ];\n\n  const decorator = (...args: any) => {\n    const store = JsonEntityStore.from(...args);\n    store.nestedGenerics = nestedGenerics;\n  };\n\n  decorator.Nested = (...generics: any) => {\n    nestedGenerics.push(generics);\n\n    return decorator;\n  };\n\n  return decorator;\n}\n","import {decorateMethodsOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Add deprecated metadata on the decorated element.\n *\n * ## Examples\n *\n * ```typescript\n *\n * @Deprecated()\n * class MyCtrl {\n *   @Deprecated()\n *   @Get(\"/\")\n *   method(){\n *   }\n * }\n * ```\n *\n * @param deprecated\n * @decorator\n * @swagger\n * @schema\n * @operation\n */\nexport function Deprecated(deprecated: boolean = true) {\n  return JsonEntityFn((store, args) => {\n    switch (store.decoratorType) {\n      case DecoratorTypes.METHOD:\n        store.operation!.deprecated(deprecated);\n        break;\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], Deprecated(deprecated));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Deprecated, args);\n    }\n  });\n}\n","import {decorateMethodsOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Add consumes metadata on the decorated element.\n *\n * ## Examples\n *\n * ```typescript\n * class Model {\n *    @Consumes(\"application/x-www-form-urlencoded\")\n *    id: string;\n * }\n * ```\n *\n * @param consumes\n * @decorator\n * @swagger\n * @classDecorator\n * @operation\n */\nexport function Consumes(...consumes: string[]) {\n  return JsonEntityFn((store, args) => {\n    switch (store.decoratorType) {\n      case DecoratorTypes.METHOD:\n        store.operation!.consumes(consumes);\n        break;\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], Consumes(...consumes));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Consumes, args);\n    }\n  });\n}\n","import {DecoratorParameters, DecoratorTypes} from \"@tsed/core\";\nimport {pascalCase} from \"change-case\";\nimport {JsonEntityStore} from \"./JsonEntityStore\";\n\n/**\n * @ignore\n */\nexport interface DecoratorActionHandler {\n  (ctx: Map<string, any>): void;\n}\n\n/**\n * @ignore\n */\nexport abstract class DecoratorContext<T = any> extends Map<string, any> {\n  readonly methods: string[];\n  protected decoratorType: DecoratorTypes;\n  protected store: JsonEntityStore;\n  protected actions: DecoratorActionHandler[] = [];\n\n  addAction(cb: DecoratorActionHandler) {\n    this.actions.push(cb);\n    return this;\n  }\n\n  build(): T {\n    const decorator: any = (...args: DecoratorParameters) => this.onInit(args, decorator);\n\n    const wrap = (cb: any) => {\n      return (...args: any[]) => {\n        cb(...args);\n        return decorator;\n      };\n    };\n\n    const wrapKey = (key: string) => {\n      return wrap((...values: any[]) => {\n        key in this ? (this as any)[key](...values) : this.set(key, values[0]);\n      });\n    };\n\n    this.methods.forEach((name) => {\n      decorator[pascalCase(name)] = wrapKey(name);\n    });\n\n    return (decorator as unknown) as T;\n  }\n\n  toObject(): any {\n    return [...this.entries()].reduce((obj, [key, value]) => {\n      return {\n        ...obj,\n        [key]: value\n      };\n    }, {});\n  }\n\n  getMergedKey(key: string, defaultValue: any) {\n    let value = this.get(key) || defaultValue;\n\n    if (!value) {\n      return;\n    }\n\n    if (this.decoratorType === DecoratorTypes.CLASS) {\n      value = {\n        ...value,\n        ...(defaultValue || {})\n      };\n    }\n\n    return {\n      ...(defaultValue || {}),\n      ...value\n    };\n  }\n\n  protected abstract onInit(args: DecoratorParameters, decorator: any): void;\n\n  protected runActions() {\n    this.actions.forEach((action: any) => {\n      action(this);\n    });\n\n    return this;\n  }\n}\n","import {\n  decorateMethodsOf,\n  decoratorTypeOf,\n  DecoratorTypes,\n  isCollection,\n  isObject,\n  isPlainObject,\n  isPrimitiveOrPrimitiveClass,\n  isString,\n  Type,\n  UnsupportedDecoratorType\n} from \"@tsed/core\";\nimport {OS3Example} from \"@tsed/openspec\";\nimport {HTTP_STATUS_MESSAGES} from \"../../constants/httpStatusMessages\";\nimport {DecoratorContext} from \"../../domain/DecoratorContext\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonResponse} from \"../../domain/JsonResponse\";\nimport {JsonSchema, JsonSchemaObject} from \"../../domain/JsonSchema\";\nimport {JsonHeader, JsonHeaders} from \"../../interfaces/JsonOpenSpec\";\nimport {getStatusModel} from \"../../utils/defineStatusModel\";\nimport {string} from \"../../utils/from\";\nimport {GenericValue} from \"../../utils/generics\";\nimport {isSuccessStatus} from \"../../utils/isSuccessStatus\";\nimport {mapHeaders} from \"../../utils/mapHeaders\";\n\nexport interface ReturnsChainedDecorators {\n  <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> | void;\n\n  (target: Function): void;\n\n  /**\n   * Set a Content-Type for the current response\n   * @param value\n   * @constructor\n   */\n  ContentType(value: string): this;\n\n  /**\n   * Add a description\n   * @param description\n   */\n  Description(description: string): this;\n\n  /**\n   * Add examples\n   * @param examples\n   */\n  Examples(examples: Record<string, OS3Example>): this;\n\n  Examples(examples: Record<string, any>): this;\n\n  Examples(examples: any): this;\n\n  /**\n   * Change the model type\n   * @param type\n   */\n  Type(type: Type<any> | any): this;\n\n  /**\n   * Change the status\n   * @param status\n   * @constructor\n   */\n  Status(status: string | number): this;\n\n  /**\n   * Add the nested types\n   * @param types\n   */\n  Of(...types: GenericValue[]): this;\n\n  /**\n   * Declare a nested generic models\n   * @param generics\n   */\n  Nested(...generics: GenericValue[]): this;\n\n  /**\n   * Add header.\n   * @param key\n   * @param value\n   */\n  Header(key: string, value: number | string | (JsonHeader & {value?: string | number | boolean})): this;\n\n  /**\n   * Add headers\n   */\n  Headers(headers: JsonHeaders): this;\n\n  /**\n   * Add location hea\n   */\n  Location(location: string, meta?: JsonHeader): this;\n\n  /**\n   * Assign partial schema\n   * @param schema\n   */\n  Schema(schema: Partial<JsonSchemaObject> | JsonSchema): this;\n\n  /**\n   * Add an inline title for the return model.\n   * @param title\n   */\n  Title(title: string): this;\n\n  /**\n   *\n   * @param groups\n   * @constructor\n   */\n  Groups(...groups: string[]): this;\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nfunction isEnum(type: any) {\n  return isObject(type) && !(\"toJSON\" in type);\n}\n\nfunction mapGenerics(types: GenericValue[]) {\n  return types.map((type) => {\n    if (isEnum(type)) {\n      return string().enum(Object.values(type));\n    }\n    return type;\n  });\n}\n\n/**\n * @ignore\n */\nclass ReturnDecoratorContext extends DecoratorContext<ReturnsChainedDecorators> {\n  readonly methods: string[] = [\n    \"contentType\",\n    \"description\",\n    \"examples\",\n    \"type\",\n    \"status\",\n    \"of\",\n    \"nested\",\n    \"header\",\n    \"headers\",\n    \"schema\",\n    \"title\",\n    \"groups\",\n    \"location\"\n  ];\n\n  constructor({status, model}: any) {\n    super();\n\n    this.model(model);\n    this.status(status);\n  }\n\n  type(model: any) {\n    return this.model(model);\n  }\n\n  model(model: any) {\n    model && this.set(\"model\", model);\n    return this;\n  }\n\n  status(status: number | string) {\n    this.set(\"status\", status);\n\n    if (status && HTTP_STATUS_MESSAGES[status] && !this.get(\"description\")) {\n      this.set(\"description\", HTTP_STATUS_MESSAGES[status]);\n\n      if (!this.get(\"model\")) {\n        this.model(getStatusModel(+status));\n      }\n    }\n\n    return this;\n  }\n\n  headers(headers: JsonHeaders) {\n    this.set(\"headers\", {\n      ...(this.get(\"headers\") || {}),\n      ...mapHeaders(headers)\n    });\n\n    return this;\n  }\n\n  header(key: string, value: string | JsonHeader) {\n    return this.headers({[key]: value});\n  }\n\n  location(path: string, meta: JsonHeaders = {}) {\n    this.headers({\n      Location: {\n        ...meta,\n        value: path\n      }\n    });\n\n    return this;\n  }\n\n  groups(...groups: string[]) {\n    this.set(\"groups\", groups);\n    return this;\n  }\n\n  nested(...generics: GenericValue[]) {\n    const model = this.get(\"model\");\n    this.checkPrimitive(model);\n    this.checkCollection(model);\n\n    this.addAction((ctx) => {\n      (this.get(\"schema\") as JsonSchema).nestedGenerics.push(mapGenerics(generics));\n    });\n\n    return this;\n  }\n\n  of(...types: (Type<any> | any)[]) {\n    const model = this.get(\"model\");\n    this.checkPrimitive(model);\n\n    this.addAction(() => {\n      const schema = this.get(\"schema\") as JsonSchema;\n\n      if (isCollection(model)) {\n        schema?.itemSchema({type: types[0]});\n      } else {\n        schema?.nestedGenerics.push(mapGenerics(types));\n      }\n    });\n\n    return this;\n  }\n\n  schema(partial: Partial<JsonSchemaObject>) {\n    this.addAction(() => {\n      const schema = this.get(\"schema\") as JsonSchema;\n\n      schema!.assign(partial);\n    });\n\n    return this;\n  }\n\n  examples(examples: any) {\n    this.set(\"examples\", isString(examples) ? [examples] : examples);\n    return this;\n  }\n\n  title(title: string) {\n    return this.schema({title});\n  }\n\n  protected checkPrimitive(model: any) {\n    if (isPrimitiveOrPrimitiveClass(model)) {\n      throw new Error(\"Returns.Of cannot be used with the following primitive classes: String, Number, Boolean\");\n    }\n  }\n\n  protected checkCollection(model: any) {\n    if (isCollection(model)) {\n      throw new Error(\"Returns.Nested cannot be used with the following classes: Map, Set, Array, String, Number, Boolean\");\n    }\n  }\n\n  protected getContentType() {\n    const model = this.get(\"model\");\n    let contentType = this.get(\"contentType\");\n\n    if (model && !isPlainObject(model) && !isPrimitiveOrPrimitiveClass(model)) {\n      contentType = contentType || \"application/json\";\n    }\n\n    return contentType;\n  }\n\n  protected getStatus() {\n    return this.get(\"status\") || \"default\";\n  }\n\n  protected onInit(args: any[], decorator: any) {\n    const type = decoratorTypeOf(args);\n    switch (type) {\n      case DecoratorTypes.METHOD:\n        this.store = JsonEntityStore.from(...args);\n        if (this.store.operation) {\n          this.map();\n        }\n        break;\n      case DecoratorTypes.CLASS:\n        this.decoratorType = DecoratorTypes.CLASS;\n        decorateMethodsOf(args[0], decorator);\n        break;\n      default:\n        throw new UnsupportedDecoratorType(Returns, args);\n    }\n\n    this.clear();\n  }\n\n  protected map() {\n    const model = this.get(\"model\");\n    const {store, decoratorType} = this;\n    const operation = this.store.operation!;\n    const currentStatus = this.getStatus();\n    const response = operation.ensureResponseOf(currentStatus);\n    const contentType = this.getContentType();\n\n    let {description = response.get(\"description\")} = this.toObject();\n\n    if (description) {\n      description = decoratorType === DecoratorTypes.CLASS ? response.get(\"description\") || description : description;\n      response.description(description);\n    }\n\n    const headers = this.getMergedKey(\"headers\", response.get(\"headers\"));\n\n    if (headers) {\n      response.headers(headers);\n    }\n\n    this.mapMedia(response);\n\n    if (isSuccessStatus(this.get(\"status\")) || currentStatus === \"default\") {\n      if (model) {\n        store.type = model;\n      }\n    }\n\n    // additional info for OS2\n    contentType && operation.addProduce(contentType);\n\n    // run additional actions\n    return this.runActions();\n  }\n\n  protected mapMedia(response: JsonResponse) {\n    const contentType = this.getContentType();\n    const model = this.get(\"model\");\n    const media = response.getMedia(contentType || \"*/*\");\n    const schema = media.get(\"schema\") || new JsonSchema({type: model});\n\n    model && schema.type(model);\n\n    this.set(\"schema\", schema);\n\n    media.schema(schema);\n\n    media.groups = this.get(\"groups\");\n\n    const examples = this.get(\"examples\");\n\n    if (examples) {\n      media.examples(examples);\n    }\n\n    return media;\n  }\n}\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ## Usage\n *\n * Ts.ED v5/v6 API introducing the chaining decorator concept. Now a decorator like Returns can be used with another decorators like Description.\n *\n * ::: warning\n * v5 has a basic support of the chaining decorator to facilitate the migration to v6!\n * :::\n *\n * ```typescript\n * import {Returns} from \"@tsed/schema\";\n *\n * @Controller(\"/\")\n * class MyController {\n *   @Returns(404, String).Description(\"Not Found\")\n *   @Returns(200, Model).Description(\"Success\")\n *   async myMethod(): Promise<Model> {}\n * }\n * ```\n *\n * ::: tip\n * TypeScript and your IDE will discover automatically the chained decorators. But for more details you can look on @@ReturnsChainedDecorators@@ interface, to know\n * what chained decorators are available under Returns decorator.\n * :::\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"string\"}\n *     },\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"$ref\": \"...\"}\n *     }\n *   }\n * }\n * ```\n *\n * ## Declaring an Array\n *\n * Use chained decorators to declare an array with model as following:\n *\n * ```typescript\n * import {Returns} from \"@tsed/schema\";\n *\n * @Controller(\"/models\")\n * class ModelCtrl {\n *   @Get(\"/\")\n *   @Returns(200, Array).Of(Model).Description(\"Success\")\n *   async myMethod(): Promise<Model>  {\n *   }\n * }\n * ```\n *\n * Deprecated version:\n *\n * ```typescript\n * import {ReturnsArray} from \"@tsed/common\";\n * import {Returns} from \"@tsed/schema\";\n *\n * @Controller(\"/\")\n * class MyController {\n *   @ReturnsArray(200, Model) // deprecated\n *   async myMethod(): Promise<Model> {}\n * }\n * ```\n *\n * ### Declaring a generic model <Badge text=\"6+\"/>\n *\n * Sometime, it might be useful to use generic models. TypeScript doesn't store the generic type in the metadata. This is why we need to\n * declare explicitly the generic models with the decorators.\n *\n * One of the generic's usage, can be a paginated list. With Returns decorator it's now possible to declare generic type and generate the appropriate OpenSpec documentation.\n *\n * Starting with the pagination model, by using @@Generics@@ and @@CollectionOf@@:\n *\n * ```typescript\n * @Generics(\"T\")\n * class Pagination<T> {\n *  @CollectionOf(\"T\")\n *  data: T[];\n *\n *  @Property()\n *  totalCount: number;\n * }\n * ```\n *\n * Now, we need a model to be used with the generic Pagination model:\n *\n * ```typescript\n * class Product {\n *  @Property()\n *  id: string;\n *\n *  @Property()\n *  title: string;\n * }\n * ```\n *\n * Finally, we can use our models on a method as following:\n *\n * ```typescript\n * class Controller {\n *   @OperationPath(\"POST\", \"/\")\n *   @Returns(200, Pagination).Of(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Product> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * ### Declaring a nested generics models <Badge text=\"6+\"/>\n *\n * It's also possible to declare a nested generics models in order to have this type `Pagination<Submission<Product>>`:\n *\n * ```typescript\n * import {Generics, Property, Returns} from \"@tsed/schema\";\n * import {Post} from \"@tsed/common\";\n *\n * class Controller {\n *   @Post(\"/\")\n *   @Returns(200, Pagination).Of(Submission).Nested(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Submission<Product>> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * And here is the Submission model:\n *\n * ```typescript\n * import {Generics, Property} from \"@tsed/schema\";\n *\n * @Generics(\"T\")\n * class Submission<T> {\n *   @Property()\n *   _id: string;\n *   @Property(\"T\")\n *   data: T;\n * }\n * ```\n *\n * @param status\n * @param model\n * @decorator\n * @swagger\n * @schema\n * @response\n * @operation\n */\nexport function Returns(status?: string | number, model?: Type<any>): ReturnsChainedDecorators;\nexport function Returns(status?: string | number, model?: Type<any> | any): ReturnsChainedDecorators {\n  const context = new ReturnDecoratorContext({\n    status,\n    model\n  });\n\n  return context.build();\n}\n","import {Returns} from \"./returns\";\n\n/**\n * Sets the Content-Type HTTP header to the MIME type as determined by mime.lookup() for the specified type.\n * If type contains the “/” character, then it sets the `Content-Type` to type.\n *\n * ```typescript\n *  @ContentType('.html');              // => 'text/html'\n *  @ContentType('html');               // => 'text/html'\n *  @ContentType('json');               // => 'application/json'\n *  @ContentType('application/json');   // => 'application/json'\n *  @ContentType('png');                // => image/png\n *  private myMethod() {}\n * ```\n *\n * @param type\n * @decorator\n * @operation\n * @response\n * @headers\n */\nexport function ContentType(type: string) {\n  return Returns().ContentType(type);\n}\n","import {decorateMethodsOf, DecoratorTypes, Type, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityStore, JsonParameter, JsonSchema, JsonSchemaObject} from \"../../domain\";\nimport {JsonParameterTypes} from \"../../domain/JsonParameterTypes\";\n\nexport interface InChainedDecorators {\n  <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> | void;\n\n  (target: Object, propertyKey: string | symbol, parameterIndex: number): void;\n\n  (target: Function): void;\n\n  /**\n   * Type of this in parameter\n   * @param type\n   */\n  Type(type: Type<any>): this;\n\n  /**\n   *\n   * @param name\n   */\n  Name(name: string): this;\n\n  /**\n   *\n   * @param description\n   */\n  Description(description: string): this;\n\n  /**\n   *\n   * @param required\n   */\n  Required(required?: boolean): this;\n\n  /**\n   * Add pattern constraint. Only available for OPENAPI.\n   * @param pattern\n   */\n  Pattern(pattern: string | RegExp): this;\n\n  /**\n   * Add custom schema.\n   * @param schema\n   */\n  Schema(schema: Partial<JsonSchemaObject>): this;\n}\n\n/**\n * Add a input parameter.\n *\n * ::: warning\n * Don't use decorator with Ts.ED application to decorate parameters. Use @@BodyParams@@, @@PathParams@@, etc... instead.\n * But you can use this decorator on Method, to add extra in parameters like Authorization header.\n *\n * ```typescript\n * @Controller(\"/\")\n * class MyController {\n *    @Get(\"/\")\n *    @In(\"header\").Type(String).Name(\"Authorization\").Required()\n *    method() {\n *    }\n *  }\n * ```\n * :::\n *\n * @param inType\n * @decorator\n * @swagger\n * @schema\n * @input\n * @operation\n */\nexport function In(inType: JsonParameterTypes | string): InChainedDecorators {\n  const jsonParameter = new JsonParameter();\n  const schema: any = {};\n\n  const decorator = (target: any, propertyKey?: string | symbol, index?: PropertyDescriptor | number) => {\n    const store = JsonEntityStore.from(target, propertyKey, index);\n\n    switch (store.decoratorType) {\n      case DecoratorTypes.PARAM:\n        store.parameter!.in(inType);\n        break;\n      case DecoratorTypes.METHOD:\n        jsonParameter.in(inType);\n        store.operation!.addParameter(-1, jsonParameter);\n\n        jsonParameter.schema(JsonSchema.from(schema));\n        break;\n\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(target, decorator);\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(In, [target, propertyKey, index]);\n    }\n  };\n\n  decorator.Type = (type: Type<any>) => {\n    schema.type = type;\n\n    return decorator;\n  };\n\n  decorator.Name = (name: string) => {\n    jsonParameter.name(name);\n\n    return decorator;\n  };\n\n  decorator.Description = (description: string) => {\n    jsonParameter.description(description);\n\n    return decorator;\n  };\n\n  decorator.Required = (required: boolean = true) => {\n    jsonParameter.required(required);\n\n    return decorator;\n  };\n\n  decorator.Pattern = (pattern: string | RegExp) => {\n    return decorator.Schema({pattern: pattern.toString()});\n  };\n\n  decorator.Schema = (_schema: any) => {\n    Object.assign(schema, _schema);\n\n    return decorator;\n  };\n\n  return decorator;\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Set a swagger operationId explicitly.\n *\n * @param operationId\n * @decorator\n * @swagger\n * @schema\n * @operation\n */\nexport function OperationId(operationId: string) {\n  return JsonEntityFn((store, args) => {\n    if (store.decoratorType !== DecoratorTypes.METHOD) {\n      throw new UnsupportedDecoratorType(OperationId, args);\n    }\n\n    store.operation!.operationId(operationId);\n  });\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\nexport enum OperationMethods {\n  ALL = \"ALL\", // special key\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  PATCH = \"PATCH\",\n  HEAD = \"HEAD\",\n  DELETE = \"DELETE\",\n  OPTIONS = \"OPTIONS\",\n  CUSTOM = \"CUSTOM\"\n}\n\n/**\n * Declare new Operation with his path and http method.\n *\n * ::: warning\n * Don't use decorator with Ts.ED application.\n *\n * Use theses decorators instead:\n *\n * <ApiList query=\"status.includes('decorator') && status.includes('httpMethod')\" />\n *\n * :::\n *\n * @param method\n * @param path\n * @decorator\n * @swagger\n * @schema\n * @operation\n */\nexport function OperationPath(method: OperationMethods | string, path: string | RegExp = \"/\") {\n  return JsonEntityFn((store, args) => {\n    if (store.decoratorType !== DecoratorTypes.METHOD) {\n      throw new UnsupportedDecoratorType(OperationPath, args);\n    }\n\n    store.operation!.addOperationPath(method.toUpperCase(), path);\n  });\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Set class path to expose all endpoints\n *\n * ::: warning\n * Don't use this decorator to change the path if you develop your application with Ts.ED.\n * :::\n *\n * @param path\n * @decorator\n * @swagger\n * @schema\n * @classDecorator\n * @operation\n */\nexport function Path(path: string) {\n  return JsonEntityFn((store, args) => {\n    if (store.decoratorType !== DecoratorTypes.CLASS) {\n      throw new UnsupportedDecoratorType(Path, args);\n    }\n\n    store.path = path;\n  });\n}\n","import {decorateMethodsOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Add produces metadata on the decorated element.\n *\n * ## Examples\n * ### On method\n *\n * ```typescript\n * class Model {\n *    @Produces(\"text/html\")\n *    id: string;\n * }\n * ```\n *\n * ::: warning\n * For openspec v3 prefer `@Returns().ContentType()` usage (see @@Returns@@).\n * :::\n *\n * @param produces\n * @decorator\n * @swagger\n * @methodDecorator\n * @classDecorator\n * @operation\n * @response\n */\nexport function Produces(...produces: string[]) {\n  return JsonEntityFn((store, args) => {\n    switch (store.decoratorType) {\n      case DecoratorTypes.METHOD:\n        store.operation!.produces(produces);\n        break;\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], Produces(...produces));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Produces, args);\n    }\n  });\n}\n","import {Type} from \"@tsed/core\";\nimport {Returns, ReturnsChainedDecorators} from \"./returns\";\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ## Usage\n *\n * Ts.ED v6 API introducing the chaining decorator concept.\n * Now a decorator like Returns can be used with another decorators like Description.\n *\n * ```typescript\n * import {Returns} from \"@tsed/schema\";\n *\n * @Controller(\"/\")\n * class MyController {\n *   @Status(404, String).Description(\"Not Found\")\n *   @Status(200, Model).Description(\"Success\")\n *   async myMethod(): Promise<Model> {}\n * }\n * ```\n *\n * ::: tip\n * TypeScript and your IDE will discover automatically the chained decorators. But for more details you can look on @@ReturnsChainedDecorators@@ interface, to know\n * what chained decorators are available under Returns decorator.\n * :::\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"string\"}\n *     },\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"$ref\": \"...\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### Declaring a generic model\n *\n * Sometime, it might be useful to use generic models. TypeScript doesn't store the generic type in the metadata. This is why we need to\n * declare explicitly the generic models with the decorators.\n *\n * One of the generic's usage, can be a paginated list. With Returns decorator it's now possible to declare generic type and generate the appropriate OpenSpec documentation.\n *\n * Starting with the pagination model, by using @@Generics@@ and @@CollectionOf@@:\n *\n * ```typescript\n * @Generics(\"T\")\n * class Pagination<T> {\n *  @CollectionOf(\"T\")\n *  data: T[];\n *\n *  @Property()\n *  totalCount: number;\n * }\n * ```\n *\n * Now, we need a model to be used with the generic Pagination model:\n *\n * ```typescript\n * class Product {\n *  @Property()\n *  id: string;\n *\n *  @Property()\n *  title: string;\n * }\n * ```\n *\n * Finally, we can use our models on a method as following:\n *\n * ```typescript\n * class Controller {\n *   @OperationPath(\"POST\", \"/\")\n *   @Status(200, Pagination).Of(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Product> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * ### Declaring a nested generics models <Badge text=\"6+\"/>\n *\n * It's also possible to declare a nested generics models in order to have this type `Pagination<Submission<Product>>`:\n *\n * ```typescript\n * import {Generics, Property, Returns} from \"@tsed/schema\";\n * import {Post} from \"@tsed/common\";\n *\n * class Controller {\n *   @Post(\"/\")\n *   @Status(200, Pagination).Of(Submission).Nested(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Submission<Product>> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * And here is the Submission model:\n *\n * ```typescript\n * import {Generics, Property} from \"@tsed/schema\";\n *\n * @Generics(\"T\")\n * class Submission<T> {\n *   @Property()\n *   _id: string;\n *   @Property(\"T\")\n *   data: T;\n * }\n * ```\n *\n * @param status\n * @param model\n * @decorator\n * @swagger\n * @schema\n * @response\n * @operation\n */\nexport function Status(status: string | number, model?: Type<any> | any): ReturnsChainedDecorators {\n  return Returns(status, model);\n}\n","import {JsonHeader, JsonHeaders} from \"../../interfaces/JsonOpenSpec\";\nimport {Returns} from \"./returns\";\n\n/**\n * Sets the response’s HTTP header field to value. To set multiple fields at once, pass an object as the parameter.\n *\n * ```typescript\n * @Header('Content-Type', 'text/plain');\n * private myMethod() {}\n *\n * @Status(204)\n * @Header({\n *   \"Content-Type\": \"text/plain\",\n *   \"Content-Length\": 123,\n *   \"ETag\": {\n *     \"value\": \"12345\",\n *     \"description\": \"header description\"\n *   }\n * })\n * private myMethod() {}\n * ```\n *\n * This example will produce the swagger responses object:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"204\": {\n *       \"description\": \"Description\",\n *       \"headers\": {\n *          \"Content-Type\": {\n *             \"type\": \"string\"\n *          },\n *          \"Content-Length\": {\n *             \"type\": \"number\"\n *          },\n *          \"ETag\": {\n *             \"type\": \"string\",\n *             \"description\": \"header description\"\n *          }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @decorator\n * @operation\n * @response\n */\nexport function Header(headers: string | number | JsonHeaders, value?: string | number | JsonHeader): Function {\n  if (value !== undefined) {\n    headers = {[headers as string]: value};\n  }\n\n  return Returns().Headers(headers as JsonHeaders);\n}\n","import {decorateMethodsOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Add security metadata on the decorated method.\n *\n * ## Examples\n * ### On method\n *\n * ```typescript\n * @Controller(\"/\")\n * class ModelCtrl {\n *    @Security(\"write:calendars\")\n *    async method() {}\n * }\n * ```\n *\n * @param name\n * @param scopes\n * @decorator\n * @swagger\n * @schema\n * @classDecorator\n * @operation\n */\nexport function Security(name: string, ...scopes: string[]) {\n  return JsonEntityFn((store, args) => {\n    switch (store.decoratorType) {\n      case DecoratorTypes.METHOD:\n        store.operation!.addSecurityScopes(name, scopes);\n        break;\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], Security(name, ...scopes));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Security, args);\n    }\n  });\n}\n","import {decorateMethodsOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {OpenSpecTag} from \"@tsed/openspec\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\nfunction mapTags(tags: (string | OpenSpecTag)[]) {\n  return tags.map((tag) => {\n    if (typeof tag === \"string\") {\n      return {\n        name: tag\n      };\n    }\n\n    return tag;\n  });\n}\n\n/**\n * Add tags metadata on the decorated element.\n *\n * ## Examples\n * ### On method\n *\n * ```typescript\n * @Controller(\"/\")\n * class MyController {\n *  @Tags(\"api\")\n *  get() {}\n * }\n * ```\n *\n * @param tags\n * @decorator\n * @swagger\n * @schema\n * @classDecorator\n * @operation\n */\nexport function Tags(...tags: (string | OpenSpecTag)[]) {\n  return JsonEntityFn((store, args) => {\n    switch (store.decoratorType) {\n      case DecoratorTypes.METHOD:\n        store.operation!.addTags(mapTags(tags));\n        break;\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], Tags(...tags));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Tags, args);\n    }\n  });\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Add summary metadata on the decorated element.\n *\n * ## Examples\n * ### On method\n *\n * ```typescript\n * class Model {\n *    @Summary(\"summary\")\n *    id: string;\n * }\n * ```\n *\n * @param summary\n * @decorator\n * @swagger\n * @schema\n * @operation\n */\nexport function Summary(summary: string) {\n  return JsonEntityFn((store, args) => {\n    if (store.decoratorType !== DecoratorTypes.METHOD) {\n      throw new UnsupportedDecoratorType(Summary, args);\n    }\n\n    store.operation!.summary(summary);\n  });\n}\n","import micromatch from \"micromatch\";\n/**\n * @ignore\n */\nexport function matchGroups(groups: string[], compareWith: string[] = []) {\n  const groupsExcludes = groups.filter((group) => group.startsWith(\"!\")).map((group) => group.replace(\"!\", \"\"));\n  const groupsIncludes = groups.filter((group) => !group.startsWith(\"!\"));\n\n  if (groupsExcludes.length) {\n    if (compareWith.length && micromatch(groupsExcludes, compareWith).length) {\n      return true;\n    }\n  }\n\n  if (groupsIncludes.length) {\n    return !micromatch(\n      groups.filter((group) => !group.startsWith(\"!\")),\n      compareWith\n    ).length;\n  }\n\n  return false;\n}\n","import {DecoratorTypes} from \"@tsed/core\";\nimport {matchGroups} from \"../../utils/matchGroups\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Apply groups validation strategy\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Groups<T>(groupsDefinition: Record<string, (keyof T)[]>): ClassDecorator;\nexport function Groups(...groups: string[]): Function;\nexport function Groups(...groups: any): any {\n  return JsonEntityFn((entity) => {\n    switch (entity.decoratorType) {\n      case DecoratorTypes.CLASS:\n        const entries: [string, string[]][] = Object.entries(groups[0]);\n\n        entity.children.forEach((propEntity) => {\n          const groups = entries.filter(([, props]) => props.includes(propEntity.propertyName)).map(([key]) => key);\n          const decorator = Groups(...groups);\n\n          decorator(propEntity.target, propEntity.propertyKey);\n        });\n        break;\n      case DecoratorTypes.PROP:\n        entity.schema.$hooks.on(\"groups\", (prev: boolean, givenGroups: string[]) => {\n          if (!prev) {\n            if (matchGroups(groups, givenGroups)) {\n              return true;\n            }\n          }\n\n          return prev;\n        });\n        break;\n      case DecoratorTypes.PARAM:\n        entity.parameter!.groups = groups;\n        break;\n    }\n  });\n}\n","import {Groups} from \"../common/groups\";\n\n/**\n * Apply Partial group strategy on the input model\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Partial(): ParameterDecorator {\n  return Groups(\"partial\") as any;\n}\n","import {isNumber, isString, useDecorators} from \"@tsed/core\";\nimport {JsonHeader} from \"../../interfaces/JsonOpenSpec\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\nimport {Returns} from \"./returns\";\n\n/**\n * Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an HTTP status code . If not specified, status defaults to “302 “Found”.\n *\n * ```typescript\n *  @Redirect('/foo/bar')\n *  @Redirect(301, 'http://example.com').Type(Model)\n *  private myMethod() {}\n * ```\n * Redirects can be a fully-qualified URL for redirecting to a different site:\n *\n * ```typescript\n *  @Redirect('http://google.com');\n *  private myMethod() {}\n * ```\n *\n * Redirects can be relative to the root of the host name. For example, if the application is on http://example.com/admin/post/new, the following would redirect to the URL http://example.com/admin:\n *\n * ```typescript\n *  @Redirect('/admin');\n * ```\n * Redirects can be relative to the current URL. For example, from http://example.com/blog/admin/ (notice the trailing slash), the following would redirect to the URL http://example.com/blog/admin/post/new.\n *\n * ```typescript\n *  @Redirect('post/new');\n * ```\n *\n * Redirecting to post/new from http://example.com/blog/admin (no trailing slash), will redirect to http://example.com/blog/post/new.\n *\n * If you found the above behavior confusing, think of path segments as directories (with trailing slashes) and files, it will start to make sense.\n *\n * Path-relative redirects are also possible. If you were on http://example.com/admin/post/new, the following would redirect to http//example.com/admin/post:\n *\n * ```typescript\n *  @Redirect('..');\n * ``\n *\n * A back redirection redirects the request back to the referer, defaulting to / when the referer is missing.\n *\n * ```typescript\n *  @Redirect('back');\n * ```\n *\n * @param url\n * @param meta\n * @decorator\n * @operation\n * @response\n * @headers\n */\nexport function Redirect(url: string, meta?: JsonHeader): Function;\nexport function Redirect(status: number, url: string, meta?: JsonHeader): Function;\nexport function Redirect(...args: any[]): Function {\n  const {status, url, meta} = args.reduce(\n    (options: any, value: any) => {\n      if (isNumber(value)) {\n        options.status = value;\n        return options;\n      }\n\n      if (isString(value)) {\n        options.url = value;\n        return options;\n      }\n\n      options.meta = value;\n      return options;\n    },\n    {status: 302, url: \"\", meta: {}}\n  );\n  return useDecorators(\n    Returns(status).Location(url, meta),\n    JsonEntityFn((entity) => {\n      entity.operation?.setRedirection(status);\n    })\n  );\n}\n","import {JsonHeader} from \"../../interfaces/JsonOpenSpec\";\nimport {Returns} from \"./returns\";\n\n/**\n * Sets the response Location HTTP header to the specified path parameter.\n *\n * ```typescript\n *  @Location('/foo/bar', {description: 'Location to the next step'})\n *  @Location('http://example.com')\n *  @Location('back')\n *  private myMethod() {\n *\n *  }\n * ```\n *\n * A path value of “back” has a special meaning, it refers to the URL specified in the `Referer` header of the request. If the `Referer` header was not specified, it refers to “/”.\n *\n * @param location\n * @param meta\n * @returns {Function}\n * @decorator\n * @operation\n */\nexport function Location(location: string, meta?: JsonHeader) {\n  return Returns().Location(location, meta);\n}\n","import {AnyJsonSchema} from \"../../domain/JsonSchema\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Accept unknown properties on the deserialized model.\n *\n * @param schema\n * @decorator\n * @validation\n * @swagger\n * @schema\n */\nexport function AdditionalProperties(schema: boolean | AnyJsonSchema) {\n  return JsonEntityFn((entity, parameters) => {\n    entity.itemSchema.additionalProperties(schema);\n  });\n}\n","import {isClass} from \"@tsed/core\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Declare a new property on a model.\n *\n * @param type\n * @decorator\n * @validation\n * @swagger\n * @schema\n */\nexport function Property(type?: any) {\n  return JsonEntityFn((store) => {\n    if (type) {\n      if (isClass(type)) {\n        store.type = type;\n      }\n      store.itemSchema.type(type);\n    }\n  });\n}\n","import {DecoratorTypes, isClass, UnsupportedDecoratorType, useDecorators} from \"@tsed/core\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\nimport {Property} from \"./property\";\n\n/**\n * Add allowed values when the property or parameters is required.\n *\n * #### Example on parameter:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Allow(\"\") @BodyParams(\"field\") field: string) {}\n * ```\n * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.\n *\n * #### Example on model:\n *\n * ```typescript\n * class Model {\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Allow(...values: any[]) {\n  const model = values.find((item) => isClass(item));\n  return useDecorators(\n    model && Property(model),\n    JsonEntityFn((store, args) => {\n      store.schema.allow(...values);\n\n      switch (store.decoratorType) {\n        case DecoratorTypes.PARAM:\n          store.parameter!.required(true);\n          break;\n        case DecoratorTypes.PROP:\n          store.parentSchema.addRequired(store.propertyName);\n          break;\n        default:\n          throw new UnsupportedDecoratorType(Allow, args);\n      }\n    })\n  );\n}\n","import {Type} from \"@tsed/core\";\nimport {JSONSchema6TypeName} from \"json-schema\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Set the type of the array items.\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Any()\n *    property: any;\n *\n *    @Any(String, Number, Boolean)\n *    property: string | number | boolean;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": [\"integer\", \"number\", \"string\", \"boolean\", \"array\", \"object\", \"null\"]\n *     }\n *   }\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Any(...types: (JSONSchema6TypeName | Type<any> | any)[]) {\n  return JsonEntityFn((store) => {\n    store.itemSchema.any(...types);\n  });\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Set integer type.\n *\n * ::: warning\n * For v6 user, use @@Integer@@ from @tsed/schema instead of @@Integer@@ from @tsed/common.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Integer()\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"integer\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array of multiple types\n *\n * ```typescript\n * class Model {\n *    @Integer()\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"integer\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Integer() {\n  return JsonEntityFn((store) => {\n    store.itemSchema.type(\"integer\");\n  });\n}\n","import {JSONSchema6Type} from \"json-schema\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * The const keyword is used to restrict a value to a fixed value.\n *\n * ::: warning\n * For v6 user, use @@Const@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With a string\n *\n * ```typescript\n * class Model {\n *    @Const(\"value1\")\n *    property: \"value1\";\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"const\": \"value1\"\n *     }\n *   }\n * }\n * ```\n *  * ### With a boolean\n *\n * ```typescript\n * class Model {\n *    @Const(true)\n *    property: boolean;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"boolean\",\n *       \"const\": true\n *     }\n *   }\n * }\n * ```\n *\n * @param {string | number | boolean } constValue\n * @decorator\n * @validation\n * @swagger\n * @schema\n */\nexport function Const(constValue: JSONSchema6Type | any) {\n  return JsonEntityFn((store) => {\n    store.itemSchema.const(constValue);\n  });\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * There are no restrictions placed on the value of this keyword.\n *\n * ::: warning\n * For v6 user, use @@Default@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * This keyword can be used to supply a default JSON value associated with a particular schema.\n * It is RECOMMENDED that a default value be valid against the associated schema.\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Default(\"10\")\n *    property: string = \"10\";\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"default\": \"10\"\n *     }\n *   }\n * }\n * ```\n *\n * @param {string | number | boolean | {}} defaultValue\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Default(defaultValue: string | number | boolean | {}) {\n  return JsonEntityFn((store) => {\n    store.itemSchema.default(defaultValue);\n  });\n}\n","import {DecoratorParameters, decoratorTypeOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Add a description to the class, method or property\n *\n * ## Examples\n * ### On class\n *\n * ```typescript\n * @Description(\"description\")\n * class Model {\n *\n * }\n * ```\n *\n * ### On method\n *\n * ```typescript\n * @Controller(\"/\")\n * class ModelCtrl {\n *    @Description(\"description\")\n *    async method() {}\n * }\n * ```\n *\n * ### On parameter\n *\n * ```typescript\n * @Controller(\"/\")\n * class ModelCtrl {\n *    async method(@Description(\"description\") @PathParam(\"id\") id: string) {}\n * }\n * ```\n *\n * ### On property\n *\n * ```typescript\n * class Model {\n *    @Description(\"description\")\n *    id: string;\n * }\n * ```\n *\n * @param {string} description\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @classDecorator\n * @methodDecorator\n * @propertyDecorator\n * @parameterDecorator\n */\nexport function Description(description: any) {\n  return JsonEntityFn((store: JsonEntityStore, args: DecoratorParameters) => {\n    switch (decoratorTypeOf(args)) {\n      case DecoratorTypes.PROP:\n      case DecoratorTypes.CLASS:\n        store.schema.description(description);\n        break;\n\n      case DecoratorTypes.PARAM:\n        store.parameter?.description(description);\n        break;\n\n      case DecoratorTypes.METHOD:\n        store.operation?.description(description);\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Description, args);\n    }\n  });\n}\n","import {DecoratorParameters, decoratorTypeOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Add a example metadata on the decorated element.\n *\n * @decorator\n * @swagger\n * @schema\n * @input\n * @methodDecorator\n * @classDecorator\n */\nexport function Example(...examples: any[]): Function {\n  return JsonEntityFn((store: JsonEntityStore, args: DecoratorParameters) => {\n    switch (decoratorTypeOf(args)) {\n      case DecoratorTypes.CLASS:\n      case DecoratorTypes.PROP:\n      case DecoratorTypes.PARAM:\n      case DecoratorTypes.METHOD:\n        store.schema.examples(examples);\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Example, args);\n    }\n  });\n}\n","import {isObject} from \"@tsed/core\";\nimport {JSONSchema6Type} from \"json-schema\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\nconst transformTsEnum = (enumValue: any) => {\n  return Object.keys(enumValue).reduce((acc: any, key: any) => {\n    if (isNaN(+key)) {\n      const value = enumValue[key];\n\n      return acc.concat(value);\n    }\n\n    return acc;\n  }, []);\n};\n\n/**\n * The enum keyword is used to restrict a value to a fixed set of values.\n * It must be an array with at least one element, where each element is unique.\n *\n * Elements in the array might be of any value, including null.\n *\n * ::: warning\n * For v6 user, use @@Enum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Enum(\"value1\", \"value2\")\n *    property: \"value1\" | \"value2\";\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"enum\": [\"value1\", \"value2\"]\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Enum(\"value1\", \"value2\")\n *    property: (\"value1\" | \"value2\")[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"enum\": [\"value1\", \"value2\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * ### With Typescript Enum\n *\n * ```typescript\n * enum SomeEnum {\n *    ENUM_1 = \"enum1\",\n *    ENUM_2 = \"enum2\"\n * }\n *\n * class Model {\n *    @Enum(SomeEnum)\n *    property: SomeEnum;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *        \"type\": \"string\",\n *        \"enum\": [\"enum1\", \"enum2\"]\n *     }\n *   }\n * }\n * ```\n *\n * @param {string | number | boolean | {}} enumValue\n * @param enumValues\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Enum(...enumValues: (JSONSchema6Type | any)[]): Function;\nexport function Enum(enumValue: JSONSchema6Type | any, ...enumValues: JSONSchema6Type[]) {\n  return JsonEntityFn((store) => {\n    const values = [enumValue].concat(enumValues).reduce((acc, value) => {\n      if (isObject(value) && value !== null) {\n        value = transformTsEnum(value);\n      }\n\n      return acc.concat(value);\n    }, []);\n\n    const types = values.reduce((set: Set<any>, value: any) => {\n      return set.add(value === null ? \"null\" : typeof value);\n    }, new Set());\n\n    store.itemSchema.enum(values).any(...types);\n  });\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * The value of `maximum` MUST be a number, representing an inclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to `maximum`.\n *\n * ::: warning\n * For v6 user, use @@Maximum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Maximum(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"maximum\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Maximum(10)\n *    @CollectionOf(Number)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"maximum\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} maximum The maximum value allowed\n * @param {boolean} exclusive Same effect as ExclusiveMaximum decorator.\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Maximum(maximum: number, exclusive: boolean = false) {\n  return JsonEntityFn((store) => {\n    exclusive ? store.itemSchema.exclusiveMaximum(maximum) : store.itemSchema.maximum(maximum);\n  });\n}\n/**\n * The value of `maximum` MUST be a number, representing an inclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to `maximum`.\n *\n * ::: warning\n * For v6 user, use @@Maximum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Max(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"maximum\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Max(10)\n *    @CollectionOf(Number)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"maximum\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} maximum The maximum value allowed\n * @param {boolean} exclusive Same effect as ExclusiveMaximum decorator.\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Max(maximum: number, exclusive: boolean = false) {\n  return Maximum(maximum, exclusive);\n}\n","import {Maximum} from \"./maximum\";\n\n/**\n * The value of `exclusiveMaximum` MUST be number, representing an exclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then the instance is valid only if it has a value strictly less than (not equal to) `exclusiveMaximum`.\n *\n * ::: warning\n * For v6 user, use @@ExclusiveMaximum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @ExclusiveMaximum(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"exclusiveMaximum\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @ExclusiveMaximum(10)\n *    @CollectionOf(Number)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"exclusiveMaximum\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param maximum\n * @param {boolean} exclusiveMaximum\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function ExclusiveMaximum(maximum: number, exclusiveMaximum: boolean = true) {\n  return Maximum(maximum, exclusiveMaximum);\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * The value of `minimum` MUST be a number, representing an inclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to `minimum`.\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@Minimum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Minimum(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"minimum\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Minimum(10)\n *    @CollectionOf(Number)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"minimum\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} minimum The minimum value allowed\n * @param {boolean} exclusive\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Minimum(minimum: number, exclusive: boolean = false) {\n  return JsonEntityFn((store) => {\n    exclusive ? store.itemSchema.exclusiveMinimum(minimum) : store.itemSchema.minimum(minimum);\n  });\n}\n\n/**\n * The value of `minimum` MUST be a number, representing an inclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to `minimum`.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Min(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"minimum\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Min(10)\n *    @CollectionOf(Number)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"minimum\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @alias Minimum\n * @param minimum The minimum value allowed\n * @param exclusive\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Min(minimum: number, exclusive: boolean = false) {\n  return Minimum(minimum, exclusive);\n}\n","import {Minimum} from \"./minimum\";\n\n/**\n * The value of `exclusiveMinimum` MUST be number, representing an exclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then the instance is valid only if it has a value strictly greater than (not equal to) `exclusiveMinimum`.\n *\n * ::: warning\n * For v6 user, use @@ExclusiveMinimum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @ExclusiveMinimum(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"exclusiveMinimum\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @ExclusiveMinimum(10)\n *    @CollectionOf(Number)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"exclusiveMinimum\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param minimum\n * @param {boolean} exclusiveMinimum\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function ExclusiveMinimum(minimum: number, exclusiveMinimum: boolean = true) {\n  return Minimum(minimum, exclusiveMinimum);\n}\n","import {ValueOf} from \"@tsed/core\";\nimport {JsonFormatTypes} from \"../../domain/JsonFormatTypes\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * The following formats are supported for string validation with `format` keyword:\n *\n * - **date**: full-date according to [RFC3339](https://json-schema.org/latest/json-schema-validation.html#RFC3339).\n * - **time**: time with optional time-zone.\n * - **date-time**: date-time from the same source (time-zone is mandatory).\n * - **uri**: full uri with optional protocol.\n * - **email**: email address.\n * - **hostname**: host name according to [RFC1034](https://tools.ietf.org/html/rfc1034#section-3.1).\n * - **ipv4**: IP address v4.\n * - **ipv6**: IP address v6.\n * - **regex**: tests whether a string is a valid regular expression by passing it to RegExp constructor.\n *\n * ::: warning\n * For v6 user, use @@Format@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Format(\"email\")\n *    property: string;\n * }\n * ```\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"email\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Format(\"email\")\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"email\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {string} format\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Format(format: JsonFormatTypes | ValueOf<JsonFormatTypes>) {\n  return JsonEntityFn((store) => {\n    store.itemSchema.format(format);\n  });\n}\n\n/**\n * Apply an email validation on property.\n *\n * ::: warning\n * For v6 user, use @@Email@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Email()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"email\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Email()\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"email\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @validation\n * @schema\n * @swagger\n * @input\n */\nexport function Email() {\n  return Format(JsonFormatTypes.EMAIL);\n}\n\n/**\n * Apply a date-time validation on property.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @DateTime()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"date-time\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @DateTime()\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"date-time\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n * @auto-map The data will be stored on the right place according to the type and collectionType (primitive or collection).\n */\nexport function DateTime() {\n  return Format(JsonFormatTypes.DATE_TIME);\n}\n\n/**\n * Apply a time validation on property.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Time()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"time\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Time()\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"time\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function DateFormat() {\n  return Format(JsonFormatTypes.DATE);\n}\n\n/**\n * Apply a time validation on property.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @TimeFormat()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"time\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @TimeFormat()\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"time\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function TimeFormat() {\n  return Format(JsonFormatTypes.TIME);\n}\n\n/**\n * Apply a uri validation on property.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Uri()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"uri\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Uri()\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"uri\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function Uri() {\n  return Format(JsonFormatTypes.URI);\n}\n\n/**\n * Apply a url validation on property.\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Url()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"url\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Url()\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"url\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function Url() {\n  return Format(JsonFormatTypes.URL);\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Allow to forward group on specific property.\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function ForwardGroups(bool = true): PropertyDecorator {\n  return JsonEntityFn((entity) => {\n    entity.schema.$forwardGroups = bool;\n  });\n}\n","import {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * The pattern and Pattern Properties keywords use regular expressions to express constraints.\n * The regular expression syntax used is from JavaScript (ECMA 262, specifically). However, that complete syntax is not widely supported, therefore it is recommended that you stick to the subset of that syntax described below.\n *\n * ::: warning\n * For v6 user, use @@Pattern@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * A single unicode character (other than the special characters below) matches itself.\n *\n * * `^`: Matches only at the beginning of the string.\n * * `$`: Matches only at the end of the string.\n * * `(...)`: Group a series of regular expressions into a single regular expression.\n * * `|`: Matches either the regular expression preceding or following the | symbol.\n * * `[abc]`: Matches any of the characters inside the square brackets.\n * * `[a-z]`: Matches the range of characters.\n * * `[^abc]`: Matches any character not listed.\n * * `[^a-z]`: Matches any character outside of the range.\n * * `+`: Matches one or more repetitions of the preceding regular expression.\n * * `*`: Matches zero or more repetitions of the preceding regular expression.\n * * `?`: Matches zero or one repetitions of the preceding regular expression.\n * * `+?`, *?`, ??`: The `*`, `+`, and `?` qualifiers are all greedy; they match as much text as possible. Sometimes this behavior isn’t desired and you want to match as few characters as possible.\n * * `{x}`: Match exactly x occurrences of the preceding regular expression.\n * * `{x,y}`: Match at least x and at most y occurrences of the preceding regular expression.\n * * `{x,}`: Match x occurrences or more of the preceding regular expression.\n * * `{x}?`, {x,y}?, {x,}?`: Lazy versions of the above expressions.\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Pattern(\"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\")\n *    @Pattern(/^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$/)\n *    property: string;\n * }\n * ```\n *\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Pattern(/^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$/)\n *    property: string;\n * }\n * ```\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"pattern\": \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @CollectionOf(string)\n *    @Pattern(/^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$/)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *         \"type\": \"string\",\n *         \"pattern\": \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {string} pattern\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Pattern(pattern: string | RegExp) {\n  return JsonEntityFn((store: JsonEntityStore) => {\n    store.itemSchema.pattern(pattern);\n  });\n}\n","import {IgnoreCallback} from \"../../interfaces\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * @ignore\n */\nconst defaultCB = (value: any, ctx: any) => ctx.mongoose !== true;\n\n/**\n * Ignore the property when JsonMapper serialize the class to a Plain Object JavaScript.\n *\n * ::: warning\n * Swagger will not generate documentation for the ignored property.\n * :::\n *\n * ```typescript\n * class User {\n *   @Ignore()\n *   _id: string;\n *\n *   @Property()\n *   firstName: string;\n *\n *   @Property()\n *   lastName: string;\n *\n *   @Ignore((value, ctx) => !ctx.mongoose) // don't ignore prop only if mongoose\n *   password: string;\n * }\n * ```\n *\n * The controller:\n * ```typescript\n * import {Post, Controller, BodyParams} from \"@tsed/common\";\n * import {Person} from \"../models/Person\";\n *\n * @Controller(\"/\")\n * export class UsersCtrl {\n *   @Get(\"/\")\n *   get(): User {\n *     const user = new User();\n *     user._id = \"12345\";\n *     user.firstName = \"John\";\n *     user.lastName = \"Doe\";\n *     user.password = \"secretpassword\";\n *     return\n *   }\n * }\n * ```\n *\n * The expected json object:\n *\n * ```json\n * {\n *  \"firstName\": \"John\",\n *  \"lastName\": \"Doe\"\n * }\n * ```\n * @param cb Callback to know if the property must be ignored\n * @decorator\n * @validation\n * @swagger\n * @schema\n */\nexport function Ignore(cb: boolean | IgnoreCallback = defaultCB) {\n  return JsonEntityFn((store) => {\n    store.schema.ignore(cb);\n  });\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\n *\n * The length of a string instance is defined as the number of its characters as defined by [RFC 7159](http://json-schema.org/latest/json-schema-validation.html#RFC7159).\n *\n * ::: warning\n * The value of maxLength MUST be a non-negative integer.\n * :::\n *\n * ::: tip\n * Omitting this keyword has the same behavior as a value of 0.\n * :::\n *\n * ::: warning\n * For v6 user, use @@MaxLength@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @MaxLength(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"maxLength\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @MaxLength(10)\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"maxLength\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} maxLength The maximum length allowed\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function MaxLength(maxLength: number) {\n  if (maxLength < 0) {\n    throw new Error(\"The value of maxLength MUST be a non-negative integer.\");\n  }\n\n  return JsonEntityFn((store) => {\n    store.itemSchema.maxLength(maxLength);\n  });\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n *\n * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\n *\n * The length of a string instance is defined as the number of its characters as defined by [RFC 7159](http://json-schema.org/latest/json-schema-validation.html#RFC7159).\n *\n * ::: warning\n * The value of minLength MUST be a non-negative integer.\n * :::\n *\n * ::: tip\n * Omitting this keyword has the same behavior as a value of 0.\n * :::\n *\n * ::: warning\n * For v6 user, use @@MinLength@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @MinLength(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"maxLength\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @MinLength(10)\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"minLength\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} minLength\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function MinLength(minLength: number) {\n  if (minLength < 0) {\n    throw new Error(\"The value of minLength MUST be a non-negative integer.\");\n  }\n\n  return JsonEntityFn((store) => {\n    store.itemSchema.minLength(minLength);\n  });\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * A numeric instance is valid only if division by this keyword's value results in an integer.\n *\n * ::: warning\n * The value of `multipleOf` MUST be a number, strictly greater than 0.\n * :::\n *\n * ::: warning\n * For v6 user, use @@MultipleOf@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @MultipleOf(2)\n *    property: Number;\n * }\n * ```\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"multipleOf\": 2\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @CollectionOf(number)\n *    @MultipleOf(2)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"multipleOf\": 2\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} multipleOf The multiple value allowed\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function MultipleOf(multipleOf: number) {\n  if (multipleOf <= 0) {\n    throw new Error(\"The value of multipleOf MUST be a number, strictly greater than 0.\");\n  }\n\n  return JsonEntityFn((store) => {\n    store.itemSchema.multipleOf(multipleOf);\n  });\n}\n","import {DecoratorParameters, decoratorTypeOf, DecoratorTypes} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Add a name metadata on the decorated element.\n *\n * ## Examples\n * ### On parameters\n *\n * ```typescript\n * async myMethod(@Name(\"nameOf\") @PathParams(\"id\") id: string): Promise<Model>  {\n *\n * }\n * ```\n *\n * ### On parameters\n *\n * ```typescript\n * @Name(\"AliasName\")\n * @Controller(\"/\")\n * class ModelCtrl {\n *\n * }\n * ```\n *\n * @param name\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @classDecorator\n * @operation\n */\nexport function Name(name: any) {\n  return JsonEntityFn((store: JsonEntityStore, args: DecoratorParameters) => {\n    switch (decoratorTypeOf(args)) {\n      case DecoratorTypes.CLASS:\n        store.schema.name(name);\n        break;\n      case DecoratorTypes.PARAM:\n        store.parameter!.name(name);\n        break;\n      default:\n        store.parent.schema.addAlias(args[1], name);\n    }\n  });\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Add optional annotation on Property or Parameter.\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Optional() {\n  return JsonEntityFn((store, args) => {\n    switch (store.decoratorType) {\n      case DecoratorTypes.PARAM:\n        store.parameter!.required(false);\n        break;\n      case DecoratorTypes.PROP:\n        store.parentSchema.removeRequired(store.propertyName);\n        break;\n      default:\n        throw new UnsupportedDecoratorType(Optional, args);\n    }\n  });\n}\n","import {Allow} from \"./allow\";\nimport {Optional} from \"./optional\";\n\n/**\n * Add required annotation on Property or Parameter.\n *\n * The @@Required@@ decorator can be used on two cases.\n *\n * To decorate a parameters:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Required() @BodyParams(\"field\") field: string) {}\n * ```\n *\n * To decorate a model:\n *\n * ```typescript\n * class Model {\n *   @Required()\n *   field: string;\n * }\n * ```\n *\n * ::: tip\n * Required will throw a BadRequest when the given value is `null`, an empty string or `undefined`.\n * :::\n *\n * ### Allow values\n *\n * In some case, you didn't want trigger a BadRequest when the value is an empty string for example.\n * The decorator `@Allow()`, allow you to configure a value list for which there will be no exception.\n *\n * ```typescript\n * class Model {\n *   @Allow(\"\") // add automatically required flag\n *   field: string;\n * }\n * ```\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Required(required: boolean = true, ...allowedRequiredValues: any[]) {\n  return required ? Allow(...allowedRequiredValues) : Optional();\n}\n","import {DecoratorTypes} from \"@tsed/core\";\nimport {matchGroups} from \"../../utils/matchGroups\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Apply groups validation strategy for required property.\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function RequiredGroups(...groups: string[]): Function {\n  return JsonEntityFn((entity) => {\n    if (entity.decoratorType === DecoratorTypes.PROP) {\n      entity.parent.schema.$hooks.on(\"requiredGroups\", (required: string[], givenGroups: string[]) => {\n        if (matchGroups(groups, givenGroups)) {\n          return required.filter((key: string) => key !== entity.propertyKey);\n        }\n\n        return required;\n      });\n    }\n  });\n}\n","import {StoreSet} from \"@tsed/core\";\n\n/**\n * Disable documentation for the class and his endpoint.\n *\n * ````typescript\n * @Controller('/')\n * export class Ctrl {\n *\n *   @Get('/')\n *   @Hidden()\n *   hiddenRoute(){\n *\n *   }\n * }\n *\n * @Controller('/')\n * @Hidden()\n * export class Ctrl {\n *   @Get('/')\n *   hiddenRoute() {\n *\n *   }\n *   @Get('/2')\n *   hiddenRoute2() {\n *\n *   }\n * }\n * ```\n *\n * @decorator\n * @ignore\n */\nexport function Hidden() {\n  return StoreSet(\"hidden\", true);\n}\n","import {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Add title metadata on the decorated element.\n *\n * ::: warning\n * For v6 user, use @@Title@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Title(\"title\")\n *    id: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"id\": {\n *        \"type\": \"string\",\n *        \"title\": \"title\"\n *     }\n *   }\n * }\n * ```\n *\n * @param {string} title\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @classDecorator\n * @input\n */\nexport function Title(title: string) {\n  return JsonEntityFn((entity) => {\n    entity.schema.title(title);\n  });\n}\n","import {JsonSchema, JsonSchemaObject} from \"../../domain/JsonSchema\";\nimport {SpecTypes} from \"../../domain/SpecTypes\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Write data formatted to JsonSchema.\n *\n * ## Example\n *\n * ```typescript\n * @Schema({title: \"test\"})\n * class Model {\n *    @Schema({formatMinimum: \"1987-10-24\"})\n *    @Format(\"date\")\n *    birthDate: Date\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"title\": \"test\",\n *   \"properties\": {\n *     \"birthdate\": {\n *        \"type\": \"string\",\n *        \"format\": \"date\",\n *        \"formatMinimum\": \"1987-10-24\"\n *     }\n *   }\n * }\n * ```\n *\n * @param partialSchema\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @classDecorator\n * @input\n */\nexport function Schema(partialSchema: Partial<JsonSchemaObject> | JsonSchema) {\n  return JsonEntityFn((entity) => {\n    Object.entries(partialSchema).forEach(([key, value]) => {\n      entity.schema.set(key, value);\n    });\n  });\n}\n\n/**\n * Apply specific schema depending on the spec version\n * @param specType\n * @param schema\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @classDecorator\n * @input\n */\nexport function For(specType: SpecTypes, schema: any) {\n  return JsonEntityFn((entity) => {\n    entity.schema.set(specType, schema);\n  });\n}\n","import {AnyJsonSchema} from \"../../domain/JsonSchema\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * See https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.28\n *\n * ::: warning\n * OneOf isn't supported by OS2\n * :::\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @classDecorator\n * @input\n * @param oneOf\n */\nexport function OneOf(...oneOf: AnyJsonSchema[]) {\n  return JsonEntityFn((entity) => {\n    entity.itemSchema.oneOf(oneOf);\n  });\n}\n","import {AnyJsonSchema} from \"../../domain/JsonSchema\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * See https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.26\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @classDecorator\n * @input\n * @param allOf\n */\nexport function AllOf(...allOf: AnyJsonSchema[]) {\n  return JsonEntityFn((entity) => {\n    entity.itemSchema.allOf(allOf);\n  });\n}\n","import {AnyJsonSchema} from \"../../domain/JsonSchema\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * See https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.27\n *\n * ::: warning\n * AnyOf isn't supported by OS2\n * :::\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @classDecorator\n * @input\n * @param anyOf\n */\nexport function AnyOf(...anyOf: AnyJsonSchema[]) {\n  return JsonEntityFn((entity) => {\n    entity.itemSchema.anyOf(anyOf);\n  });\n}\n","import {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n/**\n * Set the property as WriteOnly.\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function WriteOnly(writeOnly: boolean = true) {\n  return JsonEntityFn((store: JsonEntityStore) => {\n    store.itemSchema.writeOnly(writeOnly);\n  });\n}\n","import {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n/**\n * Set the property as readOnly.\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function ReadOnly(readOnly: boolean = true) {\n  return JsonEntityFn((store: JsonEntityStore) => {\n    store.itemSchema.readOnly(readOnly);\n  });\n}\n","import {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Set a custom key on JsonSchema that is not a part of the official spec.\n *\n * This custom key can only be displayed if the @@getJsonSchema@@ is called with `{customKeys: true}`.\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function CustomKey(key: string, value: any) {\n  return JsonEntityFn((store: JsonEntityStore) => {\n    store.itemSchema.customKey(key, value);\n  });\n}\n/**\n * Set a group of custom keys on JsonSchema that is not a part of the official spec.\n *\n * This custom key can only be displayed if the @@getJsonSchema@@ is called with `{customKeys: true}`.\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @parameter\n * @schema\n */\nexport function CustomKeys(obj: Record<string, any>) {\n  return JsonEntityFn((store: JsonEntityStore) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      store.itemSchema.customKey(key, value);\n    });\n  });\n}\n","import {Type, useDecorators} from \"@tsed/core\";\nimport {JSONSchema6TypeName} from \"json-schema\";\nimport {Any} from \"./any\";\nimport {Property} from \"./property\";\n\n/**\n * Set field as nullable.\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Nullable(Date)\n *    property: Date | null;\n *\n *    @Nullable(String, Number, Boolean)\n *    property: string | number | boolean | null;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Nullable(type: JSONSchema6TypeName | Type<any> | any, ...types: (JSONSchema6TypeName | Type<any> | any)[]) {\n  types = [type, ...types];\n  return useDecorators(types.length === 1 && Property(types[0]), Any(null, ...types));\n}\n","import {DecoratorTypes, Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntitiesContainer} from \"../../registries/JsonEntitiesContainer\";\n\n/**\n * Declare a new JsonEntityStore class for a specific decorator type.\n *\n * @ignore\n * @param type\n * @decorator\n */\nexport function JsonEntityComponent(type: DecoratorTypes) {\n  return (target: Type<JsonEntityStore>) => {\n    JsonEntitiesContainer.set(type, target);\n  };\n}\n"],"names":["HTTP_STATUS_MESSAGES","getStatusConstant","status","constantCase","getStatusMessage","JsonSchemaMappersContainer","Map","registerJsonSchemaMapper","type","mapper","set","getJsonSchemaMapper","has","Error","get","execMapper","schema","options","JsonEntitiesContainer","getJsonEntityStore","args","store","Store","from","entityStore","decoratorTypeOf","jsonSchemaStore","target","propertyKey","index","undefined","descriptor","isJsonEntityStore","model","isStore","JsonLazyRef","constructor","getType","name","nameOf","toJSON","getGenericsMap","genericLabels","genericTypes","reduce","map","item","mapGenericsOptions","ops","generics","popGenerics","value","out","nestedGenerics","SpecTypes","getHost","host","specType","createRefName","groups","length","pascalCase","join","createRef","ref","$ref","nullable","OPENAPI","allOf","JSON","oneOf","toRef","getName","schemas","anyMapper","input","canRef","isSuccessStatus","code","Number","isRedirectionStatus","JsonMap","obj","assign","Object","entries","forEach","key","isFunction","JsonParameterTypes","formatParameterType","String","toLowerCase","replace","isParameterType","values","includes","toJsonMapCollection","content","klass","JsonRequestBody","description","addContent","mediaType","mediaContent","required","mapHeaders","headers","keys","newHeaders","example","cleanObject","JsonMedia","examples","JsonResponse","getContent","getMedia","create","addMedia","response","props","getComputedType","isPromise","isClass","isSymbol","isPrimitiveOrPrimitiveClass","isClassObject","isDate","isCollection","classOf","isArrowFn","JSON_TYPES","getJsonType","indexOf","primitiveOf","Array","isArray","Set","toJsonRegex","pattern","mapProperties","properties","JsonSchema","mapToJsonSchema","isJsonSchema","isLazyRef","isObject","Hooks","alias","_alias","_nestedGenerics","_genericLabels","_nullable","$allow","class","Date","Boolean","_target","_isCollection","isGeneric","_isGeneric","hasGenerics","genericType","_ref","itemSchema","_itemSchema","getAliasOf","property","addAlias","removeAlias","delete","$id","$schema","label","ignore","cb","bool","$hooks","on","default","const","additionalItems","contains","items","maxItems","minItems","uniqueItems","maxProperties","minProperties","allow","push","$required","clear","add","clone","$selfRequired","addRequired","removeRequired","isRequired","addProperty","patternProperties","additionalProperties","unknown","dependencies","propertyNames","enum","enumValues","uniq","definitions","anyOf","not","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","format","integer","jsonType","any","types","title","readOnly","writeOnly","customKey","toObject","addDef","getComputedItemType","getTarget","JsonOperation","parameters","responses","getResponses","getStatus","toString","tags","addTags","uniqBy","summary","operationId","defaultStatus","setRedirection","isRedirection","addResponse","statusCode","res","getResponseOf","currentCode","currentResponse","deepMerge","ensureResponseOf","getHeadersOf","getContentTypeOf","slice","security","addSecurityScopes","scopes","deprecated","addParameter","parameter","consumes","produces","addProduce","produce","concat","filter","addOperationPath","method","path","operationPaths","operation","bodyParameters","BODY","FILES","size","buildSchemaFromBodyParameters","requestBody","toRequestBody","toJsonParameter","consume","in","refs","propsLength","jsonParameter","IGNORE_OS2_PROPS","JsonParameter","split","inType","expression","schemasContainer","toMap","build","jsonSchema","PATH","isOpenApi","refToParameters","style","SWAGGER","collectionFormat","params","prop","getSchema","JsonEntityStore","Entity","children","_schema","_operation","_parameter","decoratorType","DecoratorTypes","PARAM","_type","computedType","parentSchema","parent","fromMethod","METHOD","PROP","allowedRequiredValues","descriptorOf","getResponseOptions","contentType","media","Metadata","getParamTypes","CLASS","getReturnType","collectionType","createOperation","createParameter","createProperty","parentStore","propertyName","classMapper","root","genericsMapper","isPrimitiveClass","getInheritedStores","$inherited","ancestorsOf","reverse","context","inheritedClassMapper","stores","itemMapper","lazyRefMapper","$refs","find","t","mapMapper","alterIgnore","result","alter","objectMapper","ctx","withIgnoredProps","$forwardGroups","mapAliasedProperties","alterRequiredGroups","applyStringRule","propSchema","mapRequiredProps","useAlias","aliasedKey","serializeSchema","extractRequiredProps","k","getRequiredProperties","mapNullableType","IGNORES","IGNORES_OPENSPEC","IGNORES_OS2","isEmptyProperties","shouldMapAlias","shouldSkipKey","customKeys","startsWith","schemaMapper","CACHE_KEY","getKey","stringify","entity","cache","getJsonSchema","endpoint","getPropertiesStores","$properties","currentStore","propStore","getProperties","getOperationsStores","$operations","buildPath","concatParameters","param","f","p","getVariable","subpath","prefix","right","splited","splice","postfix","getJsonPathParameters","base","RegExp","paths","isOptional","current","o","optional","mergeOperation","rootPath","defaultTags","pathParameters","operationTags","DEFAULT_PATTERN","operationIdFormatter","OPERATION_IDS","transform","str","camelCase","operationKey","match","id","caches","getSpec","operationIdPattern","ctrlPath","specJson","operationStore","targetName","components","schemesReducer","mergeReducerBuilder","tagsReducer","SPEC_REDUCERS","mergeSpec","spec","reducers","cleanUndefinedProps","JsonFormatTypes","prototype","number","string","boolean","date","DATE","datetime","DATE_TIME","time","TIME","email","EMAIL","uri","URI","url","URL","array","object","lazyRef","er","statusesModel","defineStatusModel","getStatusModel","CollectionOf","decorator","MinItems","MaxItems","MinProperties","MaxProperties","Contains","UniqueItems","ArrayOf","MapOf","CollectionContains","JsonEntityFn","fn","storedJson","Generics","storedSchema","isEnum","GenericOf","Nested","Deprecated","decorateMethodsOf","UnsupportedDecoratorType","Consumes","DecoratorContext","addAction","actions","onInit","wrap","wrapKey","methods","getMergedKey","defaultValue","runActions","action","mapGenerics","ReturnDecoratorContext","header","location","meta","Location","nested","checkPrimitive","checkCollection","of","partial","isString","getContentType","isPlainObject","Returns","currentStatus","mapMedia","ContentType","In","Type","Name","Description","Required","Pattern","Schema","OperationId","OperationMethods","OperationPath","toUpperCase","Path","Produces","Status","Header","Headers","Security","mapTags","tag","Tags","Summary","matchGroups","compareWith","groupsExcludes","group","groupsIncludes","micromatch","Groups","propEntity","prev","givenGroups","Partial","Redirect","isNumber","useDecorators","AdditionalProperties","Property","Allow","Any","Integer","Const","constValue","Default","Example","transformTsEnum","enumValue","acc","isNaN","Enum","Maximum","exclusive","Max","ExclusiveMaximum","Minimum","Min","ExclusiveMinimum","Format","Email","DateTime","DateFormat","TimeFormat","Uri","Url","ForwardGroups","defaultCB","mongoose","Ignore","MaxLength","MinLength","MultipleOf","Optional","RequiredGroups","Hidden","StoreSet","Title","partialSchema","For","OneOf","AllOf","AnyOf","WriteOnly","ReadOnly","CustomKey","CustomKeys","Nullable","JsonEntityComponent"],"mappings":"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"}