import { DIContext, InjectorService, TokenProvider } from "@tsed/di";
import { JsonEntityStore } from "@tsed/schema";
import { ParamMetadata, PipeMethods } from "../domain/ParamMetadata";
export declare type ArgScope<Context extends DIContext = DIContext> = {
    $ctx: Context;
} & Record<string, any>;
export declare type HandlerWithScope<Context extends DIContext = DIContext> = (scope: ArgScope<Context>) => any;
export interface CompileHandlerOptions<Context extends DIContext = DIContext> extends Record<any, unknown> {
    token: TokenProvider;
    propertyKey: string | symbol;
    getCustomArgs?: (scope: ArgScope<Context>) => Promise<any[]>;
}
/**
 * Platform Params abstraction layer.
 * @platform
 */
export declare class PlatformParams {
    protected injector: InjectorService;
    getPipes(param: ParamMetadata): Promise<PipeMethods<any, any>[]>;
    compile<Context extends DIContext = DIContext>(entity: JsonEntityStore): Promise<(scope: ArgScope<Context>) => Promise<any[]>>;
    getArg(scope: ArgScope, pipes: PipeMethods[], param: ParamMetadata): Promise<any>;
    compileHandler<Context extends DIContext = DIContext>(metadata: CompileHandlerOptions<Context>): Promise<HandlerWithScope<Context>>;
}
