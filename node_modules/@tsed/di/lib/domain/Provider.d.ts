import { Store, Type } from "@tsed/core";
import { IProvider, TokenProvider } from "../interfaces";
import { ProviderScope } from "./ProviderScope";
import { ProviderType } from "./ProviderType";
export declare class Provider<T = any> implements IProvider<T> {
    #private;
    type: ProviderType | any;
    instance: T;
    deps: TokenProvider[];
    imports: any[];
    useFactory: Function;
    useAsyncFactory: Function;
    useValue: any;
    _useClass: Type<T>;
    [key: string]: any;
    constructor(token: TokenProvider, options?: Partial<Provider>);
    get token(): any;
    get provide(): TokenProvider;
    set provide(value: TokenProvider);
    get useClass(): Type<T>;
    /**
     * Create a new store if the given value is a class. Otherwise the value is ignored.
     * @param value
     */
    set useClass(value: Type<T>);
    get className(): string;
    get name(): string;
    get store(): Store;
    /**
     * Get the scope of the provider.
     *
     * ::: tip Note
     * Async provider is always a SINGLETON
     * :::
     *
     * @returns {boolean}
     */
    get scope(): ProviderScope;
    /**
     * Change the scope value of the provider.
     * @param scope
     */
    set scope(scope: ProviderScope);
    get configuration(): Partial<TsED.Configuration>;
    set configuration(configuration: Partial<TsED.Configuration>);
    get(key: string): any;
    isAsync(): boolean;
    clone(): Provider;
    toString(): string;
}
