import { Provider, TokenProvider } from "@tsed/di";
import { JsonEntityStore } from "@tsed/schema";
import { ControllerMiddlewares } from "../decorators/class/controller";
import { PlatformRouterMethods } from "../interfaces/PlatformRouterMethods";
import { EndpointMetadata } from "./EndpointMetadata";
export declare class ControllerProvider<T = any> extends Provider<T> {
    readonly entity: JsonEntityStore;
    private router;
    constructor(provide: TokenProvider, options?: Partial<Provider>);
    get path(): string;
    set path(path: string);
    /**
     *
     * @returns {EndpointMetadata[]}
     */
    get endpoints(): EndpointMetadata[];
    get children(): TokenProvider[];
    /**
     *
     * @returns {ControllerProvider}
     */
    get parent(): TokenProvider | undefined;
    /**
     *
     */
    get routerOptions(): any;
    /**
     *
     * @param value
     */
    set routerOptions(value: any);
    /**
     *
     * @returns {any[]}
     */
    get middlewares(): ControllerMiddlewares;
    /**
     *
     * @param middlewares
     */
    set middlewares(middlewares: ControllerMiddlewares);
    /**
     *
     * @returns {boolean}
     */
    hasChildren(): boolean;
    /**
     *
     * @returns {boolean}
     */
    hasParent(): boolean;
    getRouter<T extends PlatformRouterMethods = any>(): T;
    setRouter(router: PlatformRouterMethods): this;
}
